71536438d97102c8d3da7e4209d71152
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpyObject = void 0;
class SpyObject {
    constructor(type) {
        if (type) {
            Object.keys(type.prototype).forEach(prop => {
                let m = null;
                try {
                    m = type.prototype[prop];
                }
                catch (e) {
                    // As we are creating spys for abstract classes,
                    // these classes might have getters that throw when they are accessed.
                    // As we are only auto creating spys for methods, this
                    // should not matter.
                }
                if (typeof m === 'function') {
                    this.spy(prop);
                }
            });
        }
    }
    spy(name) {
        if (!this[name]) {
            this[name] = this.createGuinnessCompatibleSpy(name);
        }
        return this[name];
    }
    createGuinnessCompatibleSpy(name) {
        const newSpy = jasmine.createSpy(name);
        newSpy.andCallFake = newSpy.and.callFake;
        newSpy.andReturn = newSpy.and.returnValue;
        newSpy.reset = newSpy.calls.reset;
        // revisit return null here (previously needed for rtts_assert).
        newSpy.and.returnValue(null);
        return newSpy;
    }
}
exports.SpyObject = SpyObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcaGVscGVyc1xcc3B5b2JqZWN0LnRzIiwibWFwcGluZ3MiOiI7OztBQVdBLE1BQWEsU0FBUztJQUNwQixZQUFZLElBQVU7UUFDcEIsSUFBSSxJQUFJLEVBQUU7WUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3pDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDYixJQUFJO29CQUNGLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUMxQjtnQkFBQyxPQUFPLENBQUMsRUFBRTtvQkFDVixnREFBZ0Q7b0JBQ2hELHNFQUFzRTtvQkFDdEUsc0RBQXNEO29CQUN0RCxxQkFBcUI7aUJBQ3RCO2dCQUNELElBQUksT0FBTyxDQUFDLEtBQUssVUFBVSxFQUFFO29CQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNoQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsR0FBRyxDQUFDLElBQVk7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyRDtRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFTywyQkFBMkIsQ0FBQyxJQUFZO1FBQzlDLE1BQU0sTUFBTSxHQUF5QixPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBUSxDQUFDO1FBQ3BFLE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFlLENBQUM7UUFDaEQsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQWtCLENBQUM7UUFDakQsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQVksQ0FBQztRQUN6QyxnRUFBZ0U7UUFDaEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGO0FBcENELDhCQW9DQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXERhc3NcXERlc2t0b3BcXE1hc3RlcjFfWU5PVlxcRGV2TG9naWNpZWxcXGJpYmxpb1xcc3JjXFx0ZXN0XFxqYXZhc2NyaXB0XFxzcGVjXFxoZWxwZXJzXFxzcHlvYmplY3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBHdWluZXNzQ29tcGF0aWJsZVNweSBleHRlbmRzIGphc21pbmUuU3B5IHtcclxuICAvKiogQnkgY2hhaW5pbmcgdGhlIHNweSB3aXRoIGFuZC5yZXR1cm5WYWx1ZSwgYWxsIGNhbGxzIHRvIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiBhIHNwZWNpZmljXHJcbiAgICogdmFsdWUuICovXHJcbiAgYW5kUmV0dXJuKHZhbDogYW55KTogR3VpbmVzc0NvbXBhdGlibGVTcHk7XHJcbiAgLyoqIEJ5IGNoYWluaW5nIHRoZSBzcHkgd2l0aCBhbmQuY2FsbEZha2UsIGFsbCBjYWxscyB0byB0aGUgc3B5IHdpbGwgZGVsZWdhdGUgdG8gdGhlIHN1cHBsaWVkXHJcbiAgICogZnVuY3Rpb24uICovXHJcbiAgYW5kQ2FsbEZha2UoZm46IEZ1bmN0aW9uKTogR3VpbmVzc0NvbXBhdGlibGVTcHk7XHJcbiAgLyoqIHJlbW92ZXMgYWxsIHJlY29yZGVkIGNhbGxzICovXHJcbiAgcmVzZXQoKTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNweU9iamVjdCB7XHJcbiAgY29uc3RydWN0b3IodHlwZT86IGFueSkge1xyXG4gICAgaWYgKHR5cGUpIHtcclxuICAgICAgT2JqZWN0LmtleXModHlwZS5wcm90b3R5cGUpLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgICAgbGV0IG0gPSBudWxsO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBtID0gdHlwZS5wcm90b3R5cGVbcHJvcF07XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgLy8gQXMgd2UgYXJlIGNyZWF0aW5nIHNweXMgZm9yIGFic3RyYWN0IGNsYXNzZXMsXHJcbiAgICAgICAgICAvLyB0aGVzZSBjbGFzc2VzIG1pZ2h0IGhhdmUgZ2V0dGVycyB0aGF0IHRocm93IHdoZW4gdGhleSBhcmUgYWNjZXNzZWQuXHJcbiAgICAgICAgICAvLyBBcyB3ZSBhcmUgb25seSBhdXRvIGNyZWF0aW5nIHNweXMgZm9yIG1ldGhvZHMsIHRoaXNcclxuICAgICAgICAgIC8vIHNob3VsZCBub3QgbWF0dGVyLlxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIHRoaXMuc3B5KHByb3ApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzcHkobmFtZTogc3RyaW5nKTogR3VpbmVzc0NvbXBhdGlibGVTcHkge1xyXG4gICAgaWYgKCF0aGlzW25hbWVdKSB7XHJcbiAgICAgIHRoaXNbbmFtZV0gPSB0aGlzLmNyZWF0ZUd1aW5uZXNzQ29tcGF0aWJsZVNweShuYW1lKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzW25hbWVdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVHdWlubmVzc0NvbXBhdGlibGVTcHkobmFtZTogc3RyaW5nKTogR3VpbmVzc0NvbXBhdGlibGVTcHkge1xyXG4gICAgY29uc3QgbmV3U3B5OiBHdWluZXNzQ29tcGF0aWJsZVNweSA9IGphc21pbmUuY3JlYXRlU3B5KG5hbWUpIGFzIGFueTtcclxuICAgIG5ld1NweS5hbmRDYWxsRmFrZSA9IG5ld1NweS5hbmQuY2FsbEZha2UgYXMgYW55O1xyXG4gICAgbmV3U3B5LmFuZFJldHVybiA9IG5ld1NweS5hbmQucmV0dXJuVmFsdWUgYXMgYW55O1xyXG4gICAgbmV3U3B5LnJlc2V0ID0gbmV3U3B5LmNhbGxzLnJlc2V0IGFzIGFueTtcclxuICAgIC8vIHJldmlzaXQgcmV0dXJuIG51bGwgaGVyZSAocHJldmlvdXNseSBuZWVkZWQgZm9yIHJ0dHNfYXNzZXJ0KS5cclxuICAgIG5ld1NweS5hbmQucmV0dXJuVmFsdWUobnVsbCk7XHJcbiAgICByZXR1cm4gbmV3U3B5O1xyXG4gIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=