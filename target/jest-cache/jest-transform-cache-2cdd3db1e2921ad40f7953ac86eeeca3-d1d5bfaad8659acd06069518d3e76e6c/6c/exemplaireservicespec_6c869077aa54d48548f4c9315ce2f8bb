2d045155f374eefb3237affda5168965
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const exemplaire_service_1 = require("app/entities/exemplaire/exemplaire.service");
const exemplaire_model_1 = require("app/shared/model/exemplaire.model");
describe('Service Tests', () => {
    describe('Exemplaire Service', () => {
        let injector;
        let service;
        let httpMock;
        let elemDefault;
        let expectedResult;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            injector = testing_1.getTestBed();
            service = injector.get(exemplaire_service_1.ExemplaireService);
            httpMock = injector.get(testing_2.HttpTestingController);
            elemDefault = new exemplaire_model_1.Exemplaire(0, false);
        });
        describe('Service methods', () => {
            it('should find an element', () => {
                const returnedFromService = Object.assign({}, elemDefault);
                service.find(123).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(elemDefault);
            });
            it('should create a Exemplaire', () => {
                const returnedFromService = Object.assign({
                    id: 0,
                }, elemDefault);
                const expected = Object.assign({}, returnedFromService);
                service.create(new exemplaire_model_1.Exemplaire()).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should update a Exemplaire', () => {
                const returnedFromService = Object.assign({
                    disponibilite: true,
                }, elemDefault);
                const expected = Object.assign({}, returnedFromService);
                service.update(expected).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should return a list of Exemplaire', () => {
                const returnedFromService = Object.assign({
                    disponibilite: true,
                }, elemDefault);
                const expected = Object.assign({}, returnedFromService);
                service.query().subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });
            it('should delete a Exemplaire', () => {
                service.delete(123).subscribe(resp => (expectedResult = resp.ok));
                const req = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
        });
        afterEach(() => {
            httpMock.verify();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,