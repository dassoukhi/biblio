{"file":"C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\shared\\login\\login.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\shared\\login\\login.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { LoginService } from 'app/core/login/login.service';\r\nimport { LoginModalComponent } from 'app/shared/login/login.component';\r\nimport { BiblioTestModule } from '../../../test.module';\r\nimport { MockLoginService } from '../../../helpers/mock-login.service';\r\nimport { MockRouter } from '../../../helpers/mock-route.service';\r\nimport { MockActiveModal } from '../../../helpers/mock-active-modal.service';\r\n\r\ndescribe('Component Tests', () => {\r\n  describe('LoginComponent', () => {\r\n    let comp: LoginModalComponent;\r\n    let fixture: ComponentFixture<LoginModalComponent>;\r\n    let mockLoginService: MockLoginService;\r\n    let mockRouter: MockRouter;\r\n    let mockActiveModal: MockActiveModal;\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [BiblioTestModule],\r\n        declarations: [LoginModalComponent],\r\n        providers: [\r\n          FormBuilder,\r\n          {\r\n            provide: LoginService,\r\n            useClass: MockLoginService,\r\n          },\r\n        ],\r\n      })\r\n        .overrideTemplate(LoginModalComponent, '')\r\n        .compileComponents();\r\n    }));\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(LoginModalComponent);\r\n      comp = fixture.componentInstance;\r\n      mockLoginService = TestBed.get(LoginService);\r\n      mockRouter = TestBed.get(Router);\r\n      mockActiveModal = TestBed.get(NgbActiveModal);\r\n    });\r\n\r\n    it('should authenticate the user', inject(\r\n      [],\r\n      fakeAsync(() => {\r\n        // GIVEN\r\n        const credentials = {\r\n          username: 'admin',\r\n          password: 'admin',\r\n          rememberMe: true,\r\n        };\r\n\r\n        comp.loginForm.patchValue({\r\n          username: 'admin',\r\n          password: 'admin',\r\n          rememberMe: true,\r\n        });\r\n        mockLoginService.setResponse({});\r\n        mockRouter.url = '/admin/metrics';\r\n\r\n        // WHEN/\r\n        comp.login();\r\n        tick(); // simulate async\r\n\r\n        // THEN\r\n        expect(comp.authenticationError).toEqual(false);\r\n        expect(mockActiveModal.closeSpy).toHaveBeenCalled();\r\n        expect(mockLoginService.loginSpy).toHaveBeenCalledWith(credentials);\r\n      })\r\n    ));\r\n\r\n    it('should empty the credentials upon cancel', () => {\r\n      // GIVEN\r\n      comp.loginForm.patchValue({\r\n        username: 'admin',\r\n        password: 'admin',\r\n      });\r\n\r\n      const expected = {\r\n        username: '',\r\n        password: '',\r\n        rememberMe: false,\r\n      };\r\n\r\n      // WHEN\r\n      comp.cancel();\r\n\r\n      // THEN\r\n      expect(comp.authenticationError).toEqual(false);\r\n      expect(comp.loginForm.get('username')!.value).toEqual(expected.username);\r\n      expect(comp.loginForm.get('password')!.value).toEqual(expected.password);\r\n      expect(comp.loginForm.get('rememberMe')!.value).toEqual(expected.rememberMe);\r\n      expect(mockActiveModal.dismissSpy).toHaveBeenCalledWith('cancel');\r\n    });\r\n\r\n    it('should redirect user when register', () => {\r\n      // WHEN\r\n      comp.register();\r\n\r\n      // THEN\r\n      expect(mockActiveModal.dismissSpy).toHaveBeenCalledWith('to state register');\r\n      expect(mockRouter.navigateSpy).toHaveBeenCalledWith(['/account/register']);\r\n    });\r\n\r\n    it('should redirect user when request password', () => {\r\n      // WHEN\r\n      comp.requestResetPassword();\r\n\r\n      // THEN\r\n      expect(mockActiveModal.dismissSpy).toHaveBeenCalledWith('to state requestReset');\r\n      expect(mockRouter.navigateSpy).toHaveBeenCalledWith(['/account/reset', 'request']);\r\n    });\r\n  });\r\n});\r\n"],"version":3}