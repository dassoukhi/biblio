ff7cf2cec3bcff956abcd9cd32fb2459
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const ng_bootstrap_1 = require("@ng-bootstrap/ng-bootstrap");
const login_service_1 = require("app/core/login/login.service");
const login_component_1 = require("app/shared/login/login.component");
const test_module_1 = require("../../../test.module");
const mock_login_service_1 = require("../../../helpers/mock-login.service");
describe('Component Tests', () => {
    describe('LoginComponent', () => {
        let comp;
        let fixture;
        let mockLoginService;
        let mockRouter;
        let mockActiveModal;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.BiblioTestModule],
                declarations: [login_component_1.LoginModalComponent],
                providers: [
                    forms_1.FormBuilder,
                    {
                        provide: login_service_1.LoginService,
                        useClass: mock_login_service_1.MockLoginService,
                    },
                ],
            })
                .overrideTemplate(login_component_1.LoginModalComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(login_component_1.LoginModalComponent);
            comp = fixture.componentInstance;
            mockLoginService = testing_1.TestBed.get(login_service_1.LoginService);
            mockRouter = testing_1.TestBed.get(router_1.Router);
            mockActiveModal = testing_1.TestBed.get(ng_bootstrap_1.NgbActiveModal);
        });
        it('should authenticate the user', testing_1.inject([], testing_1.fakeAsync(() => {
            // GIVEN
            const credentials = {
                username: 'admin',
                password: 'admin',
                rememberMe: true,
            };
            comp.loginForm.patchValue({
                username: 'admin',
                password: 'admin',
                rememberMe: true,
            });
            mockLoginService.setResponse({});
            mockRouter.url = '/admin/metrics';
            // WHEN/
            comp.login();
            testing_1.tick(); // simulate async
            // THEN
            expect(comp.authenticationError).toEqual(false);
            expect(mockActiveModal.closeSpy).toHaveBeenCalled();
            expect(mockLoginService.loginSpy).toHaveBeenCalledWith(credentials);
        })));
        it('should empty the credentials upon cancel', () => {
            // GIVEN
            comp.loginForm.patchValue({
                username: 'admin',
                password: 'admin',
            });
            const expected = {
                username: '',
                password: '',
                rememberMe: false,
            };
            // WHEN
            comp.cancel();
            // THEN
            expect(comp.authenticationError).toEqual(false);
            expect(comp.loginForm.get('username').value).toEqual(expected.username);
            expect(comp.loginForm.get('password').value).toEqual(expected.password);
            expect(comp.loginForm.get('rememberMe').value).toEqual(expected.rememberMe);
            expect(mockActiveModal.dismissSpy).toHaveBeenCalledWith('cancel');
        });
        it('should redirect user when register', () => {
            // WHEN
            comp.register();
            // THEN
            expect(mockActiveModal.dismissSpy).toHaveBeenCalledWith('to state register');
            expect(mockRouter.navigateSpy).toHaveBeenCalledWith(['/account/register']);
        });
        it('should redirect user when request password', () => {
            // WHEN
            comp.requestResetPassword();
            // THEN
            expect(mockActiveModal.dismissSpy).toHaveBeenCalledWith('to state requestReset');
            expect(mockRouter.navigateSpy).toHaveBeenCalledWith(['/account/reset', 'request']);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,