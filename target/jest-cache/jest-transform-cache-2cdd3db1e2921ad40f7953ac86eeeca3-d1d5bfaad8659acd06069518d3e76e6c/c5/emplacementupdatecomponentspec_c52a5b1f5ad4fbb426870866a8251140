8671434a5f08cf31ddea4e231239513e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../test.module");
const emplacement_update_component_1 = require("app/entities/emplacement/emplacement-update.component");
const emplacement_service_1 = require("app/entities/emplacement/emplacement.service");
const emplacement_model_1 = require("app/shared/model/emplacement.model");
describe('Component Tests', () => {
    describe('Emplacement Management Update Component', () => {
        let comp;
        let fixture;
        let service;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.BiblioTestModule],
                declarations: [emplacement_update_component_1.EmplacementUpdateComponent],
                providers: [forms_1.FormBuilder],
            })
                .overrideTemplate(emplacement_update_component_1.EmplacementUpdateComponent, '')
                .compileComponents();
            fixture = testing_1.TestBed.createComponent(emplacement_update_component_1.EmplacementUpdateComponent);
            comp = fixture.componentInstance;
            service = fixture.debugElement.injector.get(emplacement_service_1.EmplacementService);
        });
        describe('save', () => {
            it('Should call update service on save for existing entity', testing_1.fakeAsync(() => {
                // GIVEN
                const entity = new emplacement_model_1.Emplacement(123);
                spyOn(service, 'update').and.returnValue(rxjs_1.of(new http_1.HttpResponse({ body: entity })));
                comp.updateForm(entity);
                // WHEN
                comp.save();
                testing_1.tick(); // simulate async
                // THEN
                expect(service.update).toHaveBeenCalledWith(entity);
                expect(comp.isSaving).toEqual(false);
            }));
            it('Should call create service on save for new entity', testing_1.fakeAsync(() => {
                // GIVEN
                const entity = new emplacement_model_1.Emplacement();
                spyOn(service, 'create').and.returnValue(rxjs_1.of(new http_1.HttpResponse({ body: entity })));
                comp.updateForm(entity);
                // WHEN
                comp.save();
                testing_1.tick(); // simulate async
                // THEN
                expect(service.create).toHaveBeenCalledWith(entity);
                expect(comp.isSaving).toEqual(false);
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxlbnRpdGllc1xcZW1wbGFjZW1lbnRcXGVtcGxhY2VtZW50LXVwZGF0ZS5jb21wb25lbnQuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFtRjtBQUNuRiwrQ0FBb0Q7QUFDcEQsMENBQTZDO0FBQzdDLCtCQUEwQjtBQUUxQixzREFBd0Q7QUFDeEQsd0dBQW1HO0FBQ25HLHNGQUFrRjtBQUNsRiwwRUFBaUU7QUFFakUsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixRQUFRLENBQUMseUNBQXlDLEVBQUUsR0FBRyxFQUFFO1FBQ3ZELElBQUksSUFBZ0MsQ0FBQztRQUNyQyxJQUFJLE9BQXFELENBQUM7UUFDMUQsSUFBSSxPQUEyQixDQUFDO1FBRWhDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QixPQUFPLEVBQUUsQ0FBQyw4QkFBZ0IsQ0FBQztnQkFDM0IsWUFBWSxFQUFFLENBQUMseURBQTBCLENBQUM7Z0JBQzFDLFNBQVMsRUFBRSxDQUFDLG1CQUFXLENBQUM7YUFDekIsQ0FBQztpQkFDQyxnQkFBZ0IsQ0FBQyx5REFBMEIsRUFBRSxFQUFFLENBQUM7aUJBQ2hELGlCQUFpQixFQUFFLENBQUM7WUFFdkIsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLHlEQUEwQixDQUFDLENBQUM7WUFDOUQsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztZQUNqQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHdDQUFrQixDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUNwQixFQUFFLENBQUMsd0RBQXdELEVBQUUsbUJBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQzFFLFFBQVE7Z0JBQ1IsTUFBTSxNQUFNLEdBQUcsSUFBSSwrQkFBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQyxLQUFLLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBRSxDQUFDLElBQUksbUJBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEIsT0FBTztnQkFDUCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1osY0FBSSxFQUFFLENBQUMsQ0FBQyxpQkFBaUI7Z0JBRXpCLE9BQU87Z0JBQ1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVKLEVBQUUsQ0FBQyxtREFBbUQsRUFBRSxtQkFBUyxDQUFDLEdBQUcsRUFBRTtnQkFDckUsUUFBUTtnQkFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLCtCQUFXLEVBQUUsQ0FBQztnQkFDakMsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQUUsQ0FBQyxJQUFJLG1CQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pGLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3hCLE9BQU87Z0JBQ1AsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLGNBQUksRUFBRSxDQUFDLENBQUMsaUJBQWlCO2dCQUV6QixPQUFPO2dCQUNQLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxlbnRpdGllc1xcZW1wbGFjZW1lbnRcXGVtcGxhY2VtZW50LXVwZGF0ZS5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCBmYWtlQXN5bmMsIHRpY2sgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEZvcm1CdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgQmlibGlvVGVzdE1vZHVsZSB9IGZyb20gJy4uLy4uLy4uL3Rlc3QubW9kdWxlJztcclxuaW1wb3J0IHsgRW1wbGFjZW1lbnRVcGRhdGVDb21wb25lbnQgfSBmcm9tICdhcHAvZW50aXRpZXMvZW1wbGFjZW1lbnQvZW1wbGFjZW1lbnQtdXBkYXRlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEVtcGxhY2VtZW50U2VydmljZSB9IGZyb20gJ2FwcC9lbnRpdGllcy9lbXBsYWNlbWVudC9lbXBsYWNlbWVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRW1wbGFjZW1lbnQgfSBmcm9tICdhcHAvc2hhcmVkL21vZGVsL2VtcGxhY2VtZW50Lm1vZGVsJztcclxuXHJcbmRlc2NyaWJlKCdDb21wb25lbnQgVGVzdHMnLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ0VtcGxhY2VtZW50IE1hbmFnZW1lbnQgVXBkYXRlIENvbXBvbmVudCcsICgpID0+IHtcclxuICAgIGxldCBjb21wOiBFbXBsYWNlbWVudFVwZGF0ZUNvbXBvbmVudDtcclxuICAgIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPEVtcGxhY2VtZW50VXBkYXRlQ29tcG9uZW50PjtcclxuICAgIGxldCBzZXJ2aWNlOiBFbXBsYWNlbWVudFNlcnZpY2U7XHJcblxyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgICAgaW1wb3J0czogW0JpYmxpb1Rlc3RNb2R1bGVdLFxyXG4gICAgICAgIGRlY2xhcmF0aW9uczogW0VtcGxhY2VtZW50VXBkYXRlQ29tcG9uZW50XSxcclxuICAgICAgICBwcm92aWRlcnM6IFtGb3JtQnVpbGRlcl0sXHJcbiAgICAgIH0pXHJcbiAgICAgICAgLm92ZXJyaWRlVGVtcGxhdGUoRW1wbGFjZW1lbnRVcGRhdGVDb21wb25lbnQsICcnKVxyXG4gICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xyXG5cclxuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KEVtcGxhY2VtZW50VXBkYXRlQ29tcG9uZW50KTtcclxuICAgICAgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICAgIHNlcnZpY2UgPSBmaXh0dXJlLmRlYnVnRWxlbWVudC5pbmplY3Rvci5nZXQoRW1wbGFjZW1lbnRTZXJ2aWNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdzYXZlJywgKCkgPT4ge1xyXG4gICAgICBpdCgnU2hvdWxkIGNhbGwgdXBkYXRlIHNlcnZpY2Ugb24gc2F2ZSBmb3IgZXhpc3RpbmcgZW50aXR5JywgZmFrZUFzeW5jKCgpID0+IHtcclxuICAgICAgICAvLyBHSVZFTlxyXG4gICAgICAgIGNvbnN0IGVudGl0eSA9IG5ldyBFbXBsYWNlbWVudCgxMjMpO1xyXG4gICAgICAgIHNweU9uKHNlcnZpY2UsICd1cGRhdGUnKS5hbmQucmV0dXJuVmFsdWUob2YobmV3IEh0dHBSZXNwb25zZSh7IGJvZHk6IGVudGl0eSB9KSkpO1xyXG4gICAgICAgIGNvbXAudXBkYXRlRm9ybShlbnRpdHkpO1xyXG4gICAgICAgIC8vIFdIRU5cclxuICAgICAgICBjb21wLnNhdmUoKTtcclxuICAgICAgICB0aWNrKCk7IC8vIHNpbXVsYXRlIGFzeW5jXHJcblxyXG4gICAgICAgIC8vIFRIRU5cclxuICAgICAgICBleHBlY3Qoc2VydmljZS51cGRhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGVudGl0eSk7XHJcbiAgICAgICAgZXhwZWN0KGNvbXAuaXNTYXZpbmcpLnRvRXF1YWwoZmFsc2UpO1xyXG4gICAgICB9KSk7XHJcblxyXG4gICAgICBpdCgnU2hvdWxkIGNhbGwgY3JlYXRlIHNlcnZpY2Ugb24gc2F2ZSBmb3IgbmV3IGVudGl0eScsIGZha2VBc3luYygoKSA9PiB7XHJcbiAgICAgICAgLy8gR0lWRU5cclxuICAgICAgICBjb25zdCBlbnRpdHkgPSBuZXcgRW1wbGFjZW1lbnQoKTtcclxuICAgICAgICBzcHlPbihzZXJ2aWNlLCAnY3JlYXRlJykuYW5kLnJldHVyblZhbHVlKG9mKG5ldyBIdHRwUmVzcG9uc2UoeyBib2R5OiBlbnRpdHkgfSkpKTtcclxuICAgICAgICBjb21wLnVwZGF0ZUZvcm0oZW50aXR5KTtcclxuICAgICAgICAvLyBXSEVOXHJcbiAgICAgICAgY29tcC5zYXZlKCk7XHJcbiAgICAgICAgdGljaygpOyAvLyBzaW11bGF0ZSBhc3luY1xyXG5cclxuICAgICAgICAvLyBUSEVOXHJcbiAgICAgICAgZXhwZWN0KHNlcnZpY2UuY3JlYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChlbnRpdHkpO1xyXG4gICAgICAgIGV4cGVjdChjb21wLmlzU2F2aW5nKS50b0VxdWFsKGZhbHNlKTtcclxuICAgICAgfSkpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=