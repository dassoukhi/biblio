cb427f6bf92b6da1edc37140bb250a9a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const metrics_service_1 = require("app/admin/metrics/metrics.service");
const app_constants_1 = require("app/app.constants");
describe('Service Tests', () => {
    describe('Logs Service', () => {
        let service;
        let httpMock;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            service = testing_1.TestBed.get(metrics_service_1.MetricsService);
            httpMock = testing_1.TestBed.get(testing_2.HttpTestingController);
        });
        afterEach(() => {
            httpMock.verify();
        });
        describe('Service methods', () => {
            it('should call correct URL', () => {
                service.getMetrics().subscribe();
                const req = httpMock.expectOne({ method: 'GET' });
                const resourceUrl = app_constants_1.SERVER_API_URL + 'management/jhimetrics';
                expect(req.request.url).toEqual(resourceUrl);
            });
            it('should return Metrics', () => {
                let expectedResult = null;
                const metrics = {
                    jvm: {},
                    'http.server.requests': {},
                    cache: {},
                    services: {},
                    databases: {},
                    garbageCollector: {},
                    processMetrics: {},
                };
                service.getMetrics().subscribe(received => {
                    expectedResult = received;
                });
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(metrics);
                expect(expectedResult).toEqual(metrics);
            });
            it('should return Thread Dump', () => {
                let expectedResult = null;
                const dump = { threads: [{ name: 'test1', threadState: 'RUNNABLE' }] };
                service.threadDump().subscribe(received => {
                    expectedResult = received;
                });
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(dump);
                expect(expectedResult).toEqual(dump);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhZG1pblxcbWV0cmljc1xcbWV0cmljcy5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBZ0Q7QUFDaEQsMERBQThGO0FBRTlGLHVFQUF3RjtBQUN4RixxREFBbUQ7QUFFbkQsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7UUFDNUIsSUFBSSxPQUF1QixDQUFDO1FBQzVCLElBQUksUUFBK0IsQ0FBQztRQUVwQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7YUFDbkMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxHQUFHLGlCQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFjLENBQUMsQ0FBQztZQUN0QyxRQUFRLEdBQUcsaUJBQU8sQ0FBQyxHQUFHLENBQUMsK0JBQXFCLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDYixRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO1lBQy9CLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7Z0JBQ2pDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFFakMsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxNQUFNLFdBQVcsR0FBRyw4QkFBYyxHQUFHLHVCQUF1QixDQUFDO2dCQUM3RCxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDL0MsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO2dCQUMvQixJQUFJLGNBQWMsR0FBbUIsSUFBSSxDQUFDO2dCQUMxQyxNQUFNLE9BQU8sR0FBWTtvQkFDdkIsR0FBRyxFQUFFLEVBQUU7b0JBQ1Asc0JBQXNCLEVBQUUsRUFBRTtvQkFDMUIsS0FBSyxFQUFFLEVBQUU7b0JBQ1QsUUFBUSxFQUFFLEVBQUU7b0JBQ1osU0FBUyxFQUFFLEVBQUU7b0JBQ2IsZ0JBQWdCLEVBQUUsRUFBRTtvQkFDcEIsY0FBYyxFQUFFLEVBQUU7aUJBQ25CLENBQUM7Z0JBRUYsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDeEMsY0FBYyxHQUFHLFFBQVEsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNuQixNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFDLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtnQkFDbkMsSUFBSSxjQUFjLEdBQXNCLElBQUksQ0FBQztnQkFDN0MsTUFBTSxJQUFJLEdBQWUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFFbkYsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDeEMsY0FBYyxHQUFHLFFBQVEsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQixNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcRGFzc1xcRGVza3RvcFxcTWFzdGVyMV9ZTk9WXFxEZXZMb2dpY2llbFxcYmlibGlvXFxzcmNcXHRlc3RcXGphdmFzY3JpcHRcXHNwZWNcXGFwcFxcYWRtaW5cXG1ldHJpY3NcXG1ldHJpY3Muc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSwgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XHJcblxyXG5pbXBvcnQgeyBNZXRyaWNzU2VydmljZSwgTWV0cmljcywgVGhyZWFkRHVtcCB9IGZyb20gJ2FwcC9hZG1pbi9tZXRyaWNzL21ldHJpY3Muc2VydmljZSc7XHJcbmltcG9ydCB7IFNFUlZFUl9BUElfVVJMIH0gZnJvbSAnYXBwL2FwcC5jb25zdGFudHMnO1xyXG5cclxuZGVzY3JpYmUoJ1NlcnZpY2UgVGVzdHMnLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ0xvZ3MgU2VydmljZScsICgpID0+IHtcclxuICAgIGxldCBzZXJ2aWNlOiBNZXRyaWNzU2VydmljZTtcclxuICAgIGxldCBodHRwTW9jazogSHR0cFRlc3RpbmdDb250cm9sbGVyO1xyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xyXG4gICAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBzZXJ2aWNlID0gVGVzdEJlZC5nZXQoTWV0cmljc1NlcnZpY2UpO1xyXG4gICAgICBodHRwTW9jayA9IFRlc3RCZWQuZ2V0KEh0dHBUZXN0aW5nQ29udHJvbGxlcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgICBodHRwTW9jay52ZXJpZnkoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdTZXJ2aWNlIG1ldGhvZHMnLCAoKSA9PiB7XHJcbiAgICAgIGl0KCdzaG91bGQgY2FsbCBjb3JyZWN0IFVSTCcsICgpID0+IHtcclxuICAgICAgICBzZXJ2aWNlLmdldE1ldHJpY3MoKS5zdWJzY3JpYmUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKHsgbWV0aG9kOiAnR0VUJyB9KTtcclxuICAgICAgICBjb25zdCByZXNvdXJjZVVybCA9IFNFUlZFUl9BUElfVVJMICsgJ21hbmFnZW1lbnQvamhpbWV0cmljcyc7XHJcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0LnVybCkudG9FcXVhbChyZXNvdXJjZVVybCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gTWV0cmljcycsICgpID0+IHtcclxuICAgICAgICBsZXQgZXhwZWN0ZWRSZXN1bHQ6IE1ldHJpY3MgfCBudWxsID0gbnVsbDtcclxuICAgICAgICBjb25zdCBtZXRyaWNzOiBNZXRyaWNzID0ge1xyXG4gICAgICAgICAganZtOiB7fSxcclxuICAgICAgICAgICdodHRwLnNlcnZlci5yZXF1ZXN0cyc6IHt9LFxyXG4gICAgICAgICAgY2FjaGU6IHt9LFxyXG4gICAgICAgICAgc2VydmljZXM6IHt9LFxyXG4gICAgICAgICAgZGF0YWJhc2VzOiB7fSxcclxuICAgICAgICAgIGdhcmJhZ2VDb2xsZWN0b3I6IHt9LFxyXG4gICAgICAgICAgcHJvY2Vzc01ldHJpY3M6IHt9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlcnZpY2UuZ2V0TWV0cmljcygpLnN1YnNjcmliZShyZWNlaXZlZCA9PiB7XHJcbiAgICAgICAgICBleHBlY3RlZFJlc3VsdCA9IHJlY2VpdmVkO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoeyBtZXRob2Q6ICdHRVQnIH0pO1xyXG4gICAgICAgIHJlcS5mbHVzaChtZXRyaWNzKTtcclxuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpLnRvRXF1YWwobWV0cmljcyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gVGhyZWFkIER1bXAnLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGV4cGVjdGVkUmVzdWx0OiBUaHJlYWREdW1wIHwgbnVsbCA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgZHVtcDogVGhyZWFkRHVtcCA9IHsgdGhyZWFkczogW3sgbmFtZTogJ3Rlc3QxJywgdGhyZWFkU3RhdGU6ICdSVU5OQUJMRScgfV0gfTtcclxuXHJcbiAgICAgICAgc2VydmljZS50aHJlYWREdW1wKCkuc3Vic2NyaWJlKHJlY2VpdmVkID0+IHtcclxuICAgICAgICAgIGV4cGVjdGVkUmVzdWx0ID0gcmVjZWl2ZWQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSh7IG1ldGhvZDogJ0dFVCcgfSk7XHJcbiAgICAgICAgcmVxLmZsdXNoKGR1bXApO1xyXG4gICAgICAgIGV4cGVjdChleHBlY3RlZFJlc3VsdCkudG9FcXVhbChkdW1wKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==