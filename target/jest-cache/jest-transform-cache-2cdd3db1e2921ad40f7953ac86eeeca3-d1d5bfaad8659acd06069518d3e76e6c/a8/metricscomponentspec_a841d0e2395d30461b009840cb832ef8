4aef9930049f38167fd7cf68bb540937
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../test.module");
const metrics_component_1 = require("app/admin/metrics/metrics.component");
const metrics_service_1 = require("app/admin/metrics/metrics.service");
describe('Component Tests', () => {
    describe('MetricsComponent', () => {
        let comp;
        let fixture;
        let service;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.BiblioTestModule],
                declarations: [metrics_component_1.MetricsComponent],
            })
                .overrideTemplate(metrics_component_1.MetricsComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(metrics_component_1.MetricsComponent);
            comp = fixture.componentInstance;
            service = fixture.debugElement.injector.get(metrics_service_1.MetricsService);
        });
        describe('refresh', () => {
            it('should call refresh on init', () => {
                // GIVEN
                const response = {
                    timers: {
                        service: 'test',
                        unrelatedKey: 'test',
                    },
                    gauges: {
                        'jcache.statistics': {
                            value: 2,
                        },
                        unrelatedKey: 'test',
                    },
                };
                spyOn(service, 'getMetrics').and.returnValue(rxjs_1.of(response));
                // WHEN
                comp.ngOnInit();
                // THEN
                expect(service.getMetrics).toHaveBeenCalled();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhZG1pblxcbWV0cmljc1xcbWV0cmljcy5jb21wb25lbnQuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUF5RTtBQUN6RSwrQkFBMEI7QUFFMUIsc0RBQXdEO0FBQ3hELDJFQUF1RTtBQUN2RSx1RUFBbUU7QUFFbkUsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixRQUFRLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLElBQUksSUFBc0IsQ0FBQztRQUMzQixJQUFJLE9BQTJDLENBQUM7UUFDaEQsSUFBSSxPQUF1QixDQUFDO1FBRTVCLFVBQVUsQ0FBQyxlQUFLLENBQUMsR0FBRyxFQUFFO1lBQ3BCLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdCLE9BQU8sRUFBRSxDQUFDLDhCQUFnQixDQUFDO2dCQUMzQixZQUFZLEVBQUUsQ0FBQyxvQ0FBZ0IsQ0FBQzthQUNqQyxDQUFDO2lCQUNDLGdCQUFnQixDQUFDLG9DQUFnQixFQUFFLEVBQUUsQ0FBQztpQkFDdEMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRUosVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxvQ0FBZ0IsQ0FBQyxDQUFDO1lBQ3BELElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7WUFDakMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQ0FBYyxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtZQUN2QixFQUFFLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO2dCQUNyQyxRQUFRO2dCQUNSLE1BQU0sUUFBUSxHQUFHO29CQUNmLE1BQU0sRUFBRTt3QkFDTixPQUFPLEVBQUUsTUFBTTt3QkFDZixZQUFZLEVBQUUsTUFBTTtxQkFDckI7b0JBQ0QsTUFBTSxFQUFFO3dCQUNOLG1CQUFtQixFQUFFOzRCQUNuQixLQUFLLEVBQUUsQ0FBQzt5QkFDVDt3QkFDRCxZQUFZLEVBQUUsTUFBTTtxQkFDckI7aUJBQ0YsQ0FBQztnQkFDRixLQUFLLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBRTNELE9BQU87Z0JBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUVoQixPQUFPO2dCQUNQLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUNoRCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXERhc3NcXERlc2t0b3BcXE1hc3RlcjFfWU5PVlxcRGV2TG9naWNpZWxcXGJpYmxpb1xcc3JjXFx0ZXN0XFxqYXZhc2NyaXB0XFxzcGVjXFxhcHBcXGFkbWluXFxtZXRyaWNzXFxtZXRyaWNzLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGFzeW5jIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcclxuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IEJpYmxpb1Rlc3RNb2R1bGUgfSBmcm9tICcuLi8uLi8uLi90ZXN0Lm1vZHVsZSc7XHJcbmltcG9ydCB7IE1ldHJpY3NDb21wb25lbnQgfSBmcm9tICdhcHAvYWRtaW4vbWV0cmljcy9tZXRyaWNzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE1ldHJpY3NTZXJ2aWNlIH0gZnJvbSAnYXBwL2FkbWluL21ldHJpY3MvbWV0cmljcy5zZXJ2aWNlJztcclxuXHJcbmRlc2NyaWJlKCdDb21wb25lbnQgVGVzdHMnLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ01ldHJpY3NDb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgICBsZXQgY29tcDogTWV0cmljc0NvbXBvbmVudDtcclxuICAgIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPE1ldHJpY3NDb21wb25lbnQ+O1xyXG4gICAgbGV0IHNlcnZpY2U6IE1ldHJpY3NTZXJ2aWNlO1xyXG5cclxuICAgIGJlZm9yZUVhY2goYXN5bmMoKCkgPT4ge1xyXG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xyXG4gICAgICAgIGltcG9ydHM6IFtCaWJsaW9UZXN0TW9kdWxlXSxcclxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtNZXRyaWNzQ29tcG9uZW50XSxcclxuICAgICAgfSlcclxuICAgICAgICAub3ZlcnJpZGVUZW1wbGF0ZShNZXRyaWNzQ29tcG9uZW50LCAnJylcclxuICAgICAgICAuY29tcGlsZUNvbXBvbmVudHMoKTtcclxuICAgIH0pKTtcclxuXHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KE1ldHJpY3NDb21wb25lbnQpO1xyXG4gICAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcclxuICAgICAgc2VydmljZSA9IGZpeHR1cmUuZGVidWdFbGVtZW50LmluamVjdG9yLmdldChNZXRyaWNzU2VydmljZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZSgncmVmcmVzaCcsICgpID0+IHtcclxuICAgICAgaXQoJ3Nob3VsZCBjYWxsIHJlZnJlc2ggb24gaW5pdCcsICgpID0+IHtcclxuICAgICAgICAvLyBHSVZFTlxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgdGltZXJzOiB7XHJcbiAgICAgICAgICAgIHNlcnZpY2U6ICd0ZXN0JyxcclxuICAgICAgICAgICAgdW5yZWxhdGVkS2V5OiAndGVzdCcsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ2F1Z2VzOiB7XHJcbiAgICAgICAgICAgICdqY2FjaGUuc3RhdGlzdGljcyc6IHtcclxuICAgICAgICAgICAgICB2YWx1ZTogMixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5yZWxhdGVkS2V5OiAndGVzdCcsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3B5T24oc2VydmljZSwgJ2dldE1ldHJpY3MnKS5hbmQucmV0dXJuVmFsdWUob2YocmVzcG9uc2UpKTtcclxuXHJcbiAgICAgICAgLy8gV0hFTlxyXG4gICAgICAgIGNvbXAubmdPbkluaXQoKTtcclxuXHJcbiAgICAgICAgLy8gVEhFTlxyXG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLmdldE1ldHJpY3MpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==