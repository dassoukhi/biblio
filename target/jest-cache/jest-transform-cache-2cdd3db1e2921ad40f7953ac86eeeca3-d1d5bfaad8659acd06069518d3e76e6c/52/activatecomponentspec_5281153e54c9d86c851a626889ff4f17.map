{"file":"C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\account\\activate\\activate.component.spec.ts","mappings":";;AAAA,mDAAgF;AAChF,4CAAiD;AACjD,+BAAsC;AAEtC,sDAAwD;AACxD,4EAAyE;AACzE,4EAAwE;AACxE,gFAA4E;AAE5E,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAI,IAAuB,CAAC;QAE5B,UAAU,CAAC,eAAK,CAAC,GAAG,EAAE;YACpB,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,8BAAgB,CAAC;gBAC3B,YAAY,EAAE,CAAC,sCAAiB,CAAC;gBACjC,SAAS,EAAE;oBACT;wBACE,OAAO,EAAE,uBAAc;wBACvB,QAAQ,EAAE,IAAI,uCAAkB,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;qBACpD;iBACF;aACF,CAAC;iBACC,gBAAgB,CAAC,sCAAiB,EAAE,EAAE,CAAC;iBACvC,iBAAiB,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC,CAAC;QAEJ,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,sCAAiB,CAAC,CAAC;YAC3D,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,gBAAM,CACtD,CAAC,kCAAe,CAAC,EACjB,mBAAS,CAAC,CAAC,OAAwB,EAAE,EAAE;YACrC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,EAAE,CAAC,CAAC;YAE5C,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,cAAI,EAAE,CAAC;YAEP,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACrD,CAAC,CAAC,CACH,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,gBAAM,CACpE,CAAC,kCAAe,CAAC,EACjB,mBAAS,CAAC,CAAC,OAAwB,EAAE,EAAE;YACrC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAE9C,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,cAAI,EAAE,CAAC;YAEP,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CACH,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,gBAAM,CAC/D,CAAC,kCAAe,CAAC,EACjB,mBAAS,CAAC,CAAC,OAAwB,EAAE,EAAE;YACrC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,iBAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YAE3D,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,cAAI,EAAE,CAAC;YAEP,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\account\\activate\\activate.component.spec.ts"],"sourcesContent":["import { TestBed, async, tick, fakeAsync, inject } from '@angular/core/testing';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { of, throwError } from 'rxjs';\r\n\r\nimport { BiblioTestModule } from '../../../test.module';\r\nimport { MockActivatedRoute } from '../../../helpers/mock-route.service';\r\nimport { ActivateService } from 'app/account/activate/activate.service';\r\nimport { ActivateComponent } from 'app/account/activate/activate.component';\r\n\r\ndescribe('Component Tests', () => {\r\n  describe('ActivateComponent', () => {\r\n    let comp: ActivateComponent;\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [BiblioTestModule],\r\n        declarations: [ActivateComponent],\r\n        providers: [\r\n          {\r\n            provide: ActivatedRoute,\r\n            useValue: new MockActivatedRoute({ key: 'ABC123' }),\r\n          },\r\n        ],\r\n      })\r\n        .overrideTemplate(ActivateComponent, '')\r\n        .compileComponents();\r\n    }));\r\n\r\n    beforeEach(() => {\r\n      const fixture = TestBed.createComponent(ActivateComponent);\r\n      comp = fixture.componentInstance;\r\n    });\r\n\r\n    it('calls activate.get with the key from params', inject(\r\n      [ActivateService],\r\n      fakeAsync((service: ActivateService) => {\r\n        spyOn(service, 'get').and.returnValue(of());\r\n\r\n        comp.ngOnInit();\r\n        tick();\r\n\r\n        expect(service.get).toHaveBeenCalledWith('ABC123');\r\n      })\r\n    ));\r\n\r\n    it('should set set success to true upon successful activation', inject(\r\n      [ActivateService],\r\n      fakeAsync((service: ActivateService) => {\r\n        spyOn(service, 'get').and.returnValue(of({}));\r\n\r\n        comp.ngOnInit();\r\n        tick();\r\n\r\n        expect(comp.error).toBe(false);\r\n        expect(comp.success).toBe(true);\r\n      })\r\n    ));\r\n\r\n    it('should set set error to true upon activation failure', inject(\r\n      [ActivateService],\r\n      fakeAsync((service: ActivateService) => {\r\n        spyOn(service, 'get').and.returnValue(throwError('ERROR'));\r\n\r\n        comp.ngOnInit();\r\n        tick();\r\n\r\n        expect(comp.error).toBe(true);\r\n        expect(comp.success).toBe(false);\r\n      })\r\n    ));\r\n  });\r\n});\r\n"],"version":3}