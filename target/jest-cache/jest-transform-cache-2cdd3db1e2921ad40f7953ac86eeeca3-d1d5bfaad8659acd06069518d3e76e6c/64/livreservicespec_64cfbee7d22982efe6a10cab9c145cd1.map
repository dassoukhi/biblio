{"file":"C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\entities\\livre\\livre.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\entities\\livre\\livre.service.spec.ts"],"sourcesContent":["import { TestBed, getTestBed } from '@angular/core/testing';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { LivreService } from 'app/entities/livre/livre.service';\r\nimport { ILivre, Livre } from 'app/shared/model/livre.model';\r\n\r\ndescribe('Service Tests', () => {\r\n  describe('Livre Service', () => {\r\n    let injector: TestBed;\r\n    let service: LivreService;\r\n    let httpMock: HttpTestingController;\r\n    let elemDefault: ILivre;\r\n    let expectedResult: ILivre | ILivre[] | boolean | null;\r\n\r\n    beforeEach(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [HttpClientTestingModule],\r\n      });\r\n      expectedResult = null;\r\n      injector = getTestBed();\r\n      service = injector.get(LivreService);\r\n      httpMock = injector.get(HttpTestingController);\r\n\r\n      elemDefault = new Livre(0, 'AAAAAAA', 'AAAAAAA', 'AAAAAAA', 'AAAAAAA');\r\n    });\r\n\r\n    describe('Service methods', () => {\r\n      it('should find an element', () => {\r\n        const returnedFromService = Object.assign({}, elemDefault);\r\n\r\n        service.find(123).subscribe(resp => (expectedResult = resp.body));\r\n\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n        req.flush(returnedFromService);\r\n        expect(expectedResult).toMatchObject(elemDefault);\r\n      });\r\n\r\n      it('should create a Livre', () => {\r\n        const returnedFromService = Object.assign(\r\n          {\r\n            id: 0,\r\n          },\r\n          elemDefault\r\n        );\r\n\r\n        const expected = Object.assign({}, returnedFromService);\r\n\r\n        service.create(new Livre()).subscribe(resp => (expectedResult = resp.body));\r\n\r\n        const req = httpMock.expectOne({ method: 'POST' });\r\n        req.flush(returnedFromService);\r\n        expect(expectedResult).toMatchObject(expected);\r\n      });\r\n\r\n      it('should update a Livre', () => {\r\n        const returnedFromService = Object.assign(\r\n          {\r\n            titre: 'BBBBBB',\r\n            description: 'BBBBBB',\r\n            isbn: 'BBBBBB',\r\n            code: 'BBBBBB',\r\n          },\r\n          elemDefault\r\n        );\r\n\r\n        const expected = Object.assign({}, returnedFromService);\r\n\r\n        service.update(expected).subscribe(resp => (expectedResult = resp.body));\r\n\r\n        const req = httpMock.expectOne({ method: 'PUT' });\r\n        req.flush(returnedFromService);\r\n        expect(expectedResult).toMatchObject(expected);\r\n      });\r\n\r\n      it('should return a list of Livre', () => {\r\n        const returnedFromService = Object.assign(\r\n          {\r\n            titre: 'BBBBBB',\r\n            description: 'BBBBBB',\r\n            isbn: 'BBBBBB',\r\n            code: 'BBBBBB',\r\n          },\r\n          elemDefault\r\n        );\r\n\r\n        const expected = Object.assign({}, returnedFromService);\r\n\r\n        service.query().subscribe(resp => (expectedResult = resp.body));\r\n\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n        req.flush([returnedFromService]);\r\n        httpMock.verify();\r\n        expect(expectedResult).toContainEqual(expected);\r\n      });\r\n\r\n      it('should delete a Livre', () => {\r\n        service.delete(123).subscribe(resp => (expectedResult = resp.ok));\r\n\r\n        const req = httpMock.expectOne({ method: 'DELETE' });\r\n        req.flush({ status: 200 });\r\n        expect(expectedResult);\r\n      });\r\n    });\r\n\r\n    afterEach(() => {\r\n      httpMock.verify();\r\n    });\r\n  });\r\n});\r\n"],"version":3}