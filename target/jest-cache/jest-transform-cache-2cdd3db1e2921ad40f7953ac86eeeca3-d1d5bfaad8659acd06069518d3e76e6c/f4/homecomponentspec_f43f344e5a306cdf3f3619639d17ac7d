949c078f064f5087b3f9978442939bb0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const test_module_1 = require("../../test.module");
const home_component_1 = require("app/home/home.component");
const account_service_1 = require("app/core/auth/account.service");
const login_modal_service_1 = require("app/core/login/login-modal.service");
describe('Component Tests', () => {
    describe('Home Component', () => {
        let comp;
        let fixture;
        let accountService;
        let loginModalService;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.BiblioTestModule],
                declarations: [home_component_1.HomeComponent],
            })
                .overrideTemplate(home_component_1.HomeComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(home_component_1.HomeComponent);
            comp = fixture.componentInstance;
            accountService = testing_1.TestBed.get(account_service_1.AccountService);
            loginModalService = testing_1.TestBed.get(login_modal_service_1.LoginModalService);
        });
        it('Should call accountService.getAuthenticationState on init', () => {
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(accountService.getAuthenticationState).toHaveBeenCalled();
        });
        it('Should call accountService.isAuthenticated when it checks authentication', () => {
            // WHEN
            comp.isAuthenticated();
            // THEN
            expect(accountService.isAuthenticated).toHaveBeenCalled();
        });
        it('Should call loginModalService.open on login', () => {
            // WHEN
            comp.login();
            // THEN
            expect(loginModalService.open).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxob21lXFxob21lLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXlFO0FBRXpFLG1EQUFxRDtBQUNyRCw0REFBd0Q7QUFDeEQsbUVBQStEO0FBQy9ELDRFQUF1RTtBQUV2RSxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDOUIsSUFBSSxJQUFtQixDQUFDO1FBQ3hCLElBQUksT0FBd0MsQ0FBQztRQUM3QyxJQUFJLGNBQThCLENBQUM7UUFDbkMsSUFBSSxpQkFBb0MsQ0FBQztRQUV6QyxVQUFVLENBQUMsZUFBSyxDQUFDLEdBQUcsRUFBRTtZQUNwQixpQkFBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QixPQUFPLEVBQUUsQ0FBQyw4QkFBZ0IsQ0FBQztnQkFDM0IsWUFBWSxFQUFFLENBQUMsOEJBQWEsQ0FBQzthQUM5QixDQUFDO2lCQUNDLGdCQUFnQixDQUFDLDhCQUFhLEVBQUUsRUFBRSxDQUFDO2lCQUNuQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLDhCQUFhLENBQUMsQ0FBQztZQUNqRCxJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1lBQ2pDLGNBQWMsR0FBRyxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBYyxDQUFDLENBQUM7WUFDN0MsaUJBQWlCLEdBQUcsaUJBQU8sQ0FBQyxHQUFHLENBQUMsdUNBQWlCLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywyREFBMkQsRUFBRSxHQUFHLEVBQUU7WUFDbkUsT0FBTztZQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVoQixPQUFPO1lBQ1AsTUFBTSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDbkUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMEVBQTBFLEVBQUUsR0FBRyxFQUFFO1lBQ2xGLE9BQU87WUFDUCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFFdkIsT0FBTztZQUNQLE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM1RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxHQUFHLEVBQUU7WUFDckQsT0FBTztZQUNQLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUViLE9BQU87WUFDUCxNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNwRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxob21lXFxob21lLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGFzeW5jIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcclxuXHJcbmltcG9ydCB7IEJpYmxpb1Rlc3RNb2R1bGUgfSBmcm9tICcuLi8uLi90ZXN0Lm1vZHVsZSc7XHJcbmltcG9ydCB7IEhvbWVDb21wb25lbnQgfSBmcm9tICdhcHAvaG9tZS9ob21lLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEFjY291bnRTZXJ2aWNlIH0gZnJvbSAnYXBwL2NvcmUvYXV0aC9hY2NvdW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2dpbk1vZGFsU2VydmljZSB9IGZyb20gJ2FwcC9jb3JlL2xvZ2luL2xvZ2luLW1vZGFsLnNlcnZpY2UnO1xyXG5cclxuZGVzY3JpYmUoJ0NvbXBvbmVudCBUZXN0cycsICgpID0+IHtcclxuICBkZXNjcmliZSgnSG9tZSBDb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgICBsZXQgY29tcDogSG9tZUNvbXBvbmVudDtcclxuICAgIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPEhvbWVDb21wb25lbnQ+O1xyXG4gICAgbGV0IGFjY291bnRTZXJ2aWNlOiBBY2NvdW50U2VydmljZTtcclxuICAgIGxldCBsb2dpbk1vZGFsU2VydmljZTogTG9naW5Nb2RhbFNlcnZpY2U7XHJcblxyXG4gICAgYmVmb3JlRWFjaChhc3luYygoKSA9PiB7XHJcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgICAgaW1wb3J0czogW0JpYmxpb1Rlc3RNb2R1bGVdLFxyXG4gICAgICAgIGRlY2xhcmF0aW9uczogW0hvbWVDb21wb25lbnRdLFxyXG4gICAgICB9KVxyXG4gICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKEhvbWVDb21wb25lbnQsICcnKVxyXG4gICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xyXG4gICAgfSkpO1xyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoSG9tZUNvbXBvbmVudCk7XHJcbiAgICAgIGNvbXAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgICBhY2NvdW50U2VydmljZSA9IFRlc3RCZWQuZ2V0KEFjY291bnRTZXJ2aWNlKTtcclxuICAgICAgbG9naW5Nb2RhbFNlcnZpY2UgPSBUZXN0QmVkLmdldChMb2dpbk1vZGFsU2VydmljZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnU2hvdWxkIGNhbGwgYWNjb3VudFNlcnZpY2UuZ2V0QXV0aGVudGljYXRpb25TdGF0ZSBvbiBpbml0JywgKCkgPT4ge1xyXG4gICAgICAvLyBXSEVOXHJcbiAgICAgIGNvbXAubmdPbkluaXQoKTtcclxuXHJcbiAgICAgIC8vIFRIRU5cclxuICAgICAgZXhwZWN0KGFjY291bnRTZXJ2aWNlLmdldEF1dGhlbnRpY2F0aW9uU3RhdGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdTaG91bGQgY2FsbCBhY2NvdW50U2VydmljZS5pc0F1dGhlbnRpY2F0ZWQgd2hlbiBpdCBjaGVja3MgYXV0aGVudGljYXRpb24nLCAoKSA9PiB7XHJcbiAgICAgIC8vIFdIRU5cclxuICAgICAgY29tcC5pc0F1dGhlbnRpY2F0ZWQoKTtcclxuXHJcbiAgICAgIC8vIFRIRU5cclxuICAgICAgZXhwZWN0KGFjY291bnRTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ1Nob3VsZCBjYWxsIGxvZ2luTW9kYWxTZXJ2aWNlLm9wZW4gb24gbG9naW4nLCAoKSA9PiB7XHJcbiAgICAgIC8vIFdIRU5cclxuICAgICAgY29tcC5sb2dpbigpO1xyXG5cclxuICAgICAgLy8gVEhFTlxyXG4gICAgICBleHBlY3QobG9naW5Nb2RhbFNlcnZpY2Uub3BlbikudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=