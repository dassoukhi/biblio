{"file":"C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\core\\user\\user.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\core\\user\\user.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { JhiDateUtils } from 'ng-jhipster';\r\n\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { UserService } from 'app/core/user/user.service';\r\nimport { User } from 'app/core/user/user.model';\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\n\r\ndescribe('Service Tests', () => {\r\n  describe('User Service', () => {\r\n    let service: UserService;\r\n    let httpMock: HttpTestingController;\r\n\r\n    beforeEach(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [HttpClientTestingModule],\r\n        providers: [JhiDateUtils],\r\n      });\r\n\r\n      service = TestBed.get(UserService);\r\n      httpMock = TestBed.get(HttpTestingController);\r\n    });\r\n\r\n    afterEach(() => {\r\n      httpMock.verify();\r\n    });\r\n\r\n    describe('Service methods', () => {\r\n      it('should call correct URL', () => {\r\n        service.find('user').subscribe();\r\n\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n        const resourceUrl = SERVER_API_URL + 'api/users';\r\n        expect(req.request.url).toEqual(`${resourceUrl}/user`);\r\n      });\r\n\r\n      it('should return User', () => {\r\n        let expectedResult: string | undefined;\r\n\r\n        service.find('user').subscribe(received => {\r\n          expectedResult = received.login;\r\n        });\r\n\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n        req.flush(new User(1, 'user'));\r\n        expect(expectedResult).toEqual('user');\r\n      });\r\n\r\n      it('should return Authorities', () => {\r\n        let expectedResult: string[] = [];\r\n\r\n        service.authorities().subscribe(authorities => {\r\n          expectedResult = authorities;\r\n        });\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n\r\n        req.flush([Authority.USER, Authority.ADMIN]);\r\n        expect(expectedResult).toEqual([Authority.USER, Authority.ADMIN]);\r\n      });\r\n\r\n      it('should propagate not found response', () => {\r\n        let expectedResult = 0;\r\n\r\n        service.find('user').subscribe(null, (error: HttpErrorResponse) => {\r\n          expectedResult = error.status;\r\n        });\r\n\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n        req.flush('Invalid request parameters', {\r\n          status: 404,\r\n          statusText: 'Bad Request',\r\n        });\r\n        expect(expectedResult).toEqual(404);\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"version":3}