{"version":3,"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\main\\webapp\\app\\core\\login\\login.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeG;;;;;;;;;;;;;;;;;;;;AAfH,MAAA,MAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,eAAA,CAAA,CAAA;AAEA,MAAA,WAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;AAGA,MAAA,iBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,+BAAA,CAAA,CAAA;AACA,MAAA,kBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,gCAAA,CAAA,CAAA;;;;AAIA,IAAa,YAAY,GAAzB,MAAa,YAAb,CAAyB;AACvB,EAAA,WAAA,CAAoB,cAApB,EAA4D,kBAA5D,EAAkG;AAAA;AAAA;AAAA;AAA9E,SAAA,cAAA,GAAA,cAAA;;AAA8E;AAAA;AAAtC,SAAA,kBAAA,GAAA,kBAAA;AAA0C;;AAEtG,EAAA,KAAK,CAAC,WAAD,EAAmB;AAAA;AAAA;AAAA;AACtB,WAAO,KAAK,kBAAL,CAAwB,KAAxB,CAA8B,WAA9B,EAA2C,IAA3C,CAAgD,WAAA,CAAA,OAAA,CAAQ,MAAM;AAAA;AAAA;AAAA;AAAA,kBAAK,cAAL,CAAoB,QAApB,CAA6B,IAA7B;AAAkC,KAAhD,CAAhD,CAAP;AACD;;AAED,EAAA,MAAM,GAAA;AAAA;AAAA;AAAA;AACJ,SAAK,kBAAL,CAAwB,MAAxB,GAAiC,SAAjC,CAA2C,IAA3C,EAAiD,IAAjD,EAAuD,MAAM;AAAA;AAAA;AAAA;AAAA,kBAAK,cAAL,CAAoB,YAApB,CAAiC,IAAjC;AAAsC,KAAnG;AACD;;AATsB,CAAzB;;;;AAAa,YAAY,GAAA,OAAA,CAAA,UAAA,CAAA,CADxB,MAAA,CAAA,UAAA,CAAW;AAAE,EAAA,UAAU,EAAE;AAAd,CAAX,CACwB,E,yCACa,iBAAA,CAAA,c,EAA4C,kBAAA,CAAA,kB,EADzD,CAAA,EAAZ,YAAY,CAAZ;;;;AAAA,OAAA,CAAA,YAAA,GAAA,YAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { flatMap } from 'rxjs/operators';\r\n\r\nimport { Account } from 'app/core/user/account.model';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { AuthServerProvider } from 'app/core/auth/auth-jwt.service';\r\nimport { Login } from './login.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LoginService {\r\n  constructor(private accountService: AccountService, private authServerProvider: AuthServerProvider) {}\r\n\r\n  login(credentials: Login): Observable<Account | null> {\r\n    return this.authServerProvider.login(credentials).pipe(flatMap(() => this.accountService.identity(true)));\r\n  }\r\n\r\n  logout(): void {\r\n    this.authServerProvider.logout().subscribe(null, null, () => this.accountService.authenticate(null));\r\n  }\r\n}\r\n"]}