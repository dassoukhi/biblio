e83ce132bcb8a0196572e42619845e21
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockNgbModalRef = void 0;
const testing_1 = require("@angular/core/testing");
const ng_bootstrap_1 = require("@ng-bootstrap/ng-bootstrap");
const login_modal_service_1 = require("app/core/login/login-modal.service");
// Mock class for NgbModalRef
class MockNgbModalRef {
    constructor() {
        this.result = new Promise(resolve => resolve('x'));
    }
}
exports.MockNgbModalRef = MockNgbModalRef;
describe('Service Tests', () => {
    describe('Login Modal Service', () => {
        let service;
        let modalService;
        beforeEach(() => {
            service = testing_1.TestBed.get(login_modal_service_1.LoginModalService);
            modalService = testing_1.TestBed.get(ng_bootstrap_1.NgbModal);
        });
        describe('Service methods', () => {
            it('Should call open method for NgbModal when open method is called', () => {
                // GIVEN
                const mockModalRef = new MockNgbModalRef();
                spyOn(modalService, 'open').and.returnValue(mockModalRef);
                // WHEN
                service.open();
                // THEN
                expect(modalService.open).toHaveBeenCalled();
            });
            it('Should call open method for NgbModal one time when open method is called twice', () => {
                // GIVEN
                const mockModalRef = new MockNgbModalRef();
                spyOn(modalService, 'open').and.returnValue(mockModalRef);
                // WHEN
                service.open();
                service.open();
                // THEN
                expect(modalService.open).toHaveBeenCalledTimes(1);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxjb3JlXFxsb2dpblxcbG9naW4tbW9kYWwuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLG1EQUFnRDtBQUNoRCw2REFBc0Q7QUFFdEQsNEVBQXVFO0FBRXZFLDZCQUE2QjtBQUM3QixNQUFhLGVBQWU7SUFBNUI7UUFDRSxXQUFNLEdBQWlCLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztDQUFBO0FBRkQsMENBRUM7QUFFRCxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUM3QixRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLElBQUksT0FBMEIsQ0FBQztRQUMvQixJQUFJLFlBQXNCLENBQUM7UUFFM0IsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLEdBQUcsQ0FBQyx1Q0FBaUIsQ0FBQyxDQUFDO1lBQ3pDLFlBQVksR0FBRyxpQkFBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBUSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO1lBQy9CLEVBQUUsQ0FBQyxpRUFBaUUsRUFBRSxHQUFHLEVBQUU7Z0JBQ3pFLFFBQVE7Z0JBQ1IsTUFBTSxZQUFZLEdBQW9CLElBQUksZUFBZSxFQUFFLENBQUM7Z0JBQzVELEtBQUssQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFMUQsT0FBTztnQkFDUCxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBRWYsT0FBTztnQkFDUCxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDL0MsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsZ0ZBQWdGLEVBQUUsR0FBRyxFQUFFO2dCQUN4RixRQUFRO2dCQUNSLE1BQU0sWUFBWSxHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO2dCQUM1RCxLQUFLLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBRTFELE9BQU87Z0JBQ1AsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNmLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFFZixPQUFPO2dCQUNQLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxjb3JlXFxsb2dpblxcbG9naW4tbW9kYWwuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBOZ2JNb2RhbCB9IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJztcclxuXHJcbmltcG9ydCB7IExvZ2luTW9kYWxTZXJ2aWNlIH0gZnJvbSAnYXBwL2NvcmUvbG9naW4vbG9naW4tbW9kYWwuc2VydmljZSc7XHJcblxyXG4vLyBNb2NrIGNsYXNzIGZvciBOZ2JNb2RhbFJlZlxyXG5leHBvcnQgY2xhc3MgTW9ja05nYk1vZGFsUmVmIHtcclxuICByZXN1bHQ6IFByb21pc2U8YW55PiA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVzb2x2ZSgneCcpKTtcclxufVxyXG5cclxuZGVzY3JpYmUoJ1NlcnZpY2UgVGVzdHMnLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ0xvZ2luIE1vZGFsIFNlcnZpY2UnLCAoKSA9PiB7XHJcbiAgICBsZXQgc2VydmljZTogTG9naW5Nb2RhbFNlcnZpY2U7XHJcbiAgICBsZXQgbW9kYWxTZXJ2aWNlOiBOZ2JNb2RhbDtcclxuXHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgc2VydmljZSA9IFRlc3RCZWQuZ2V0KExvZ2luTW9kYWxTZXJ2aWNlKTtcclxuICAgICAgbW9kYWxTZXJ2aWNlID0gVGVzdEJlZC5nZXQoTmdiTW9kYWwpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoJ1NlcnZpY2UgbWV0aG9kcycsICgpID0+IHtcclxuICAgICAgaXQoJ1Nob3VsZCBjYWxsIG9wZW4gbWV0aG9kIGZvciBOZ2JNb2RhbCB3aGVuIG9wZW4gbWV0aG9kIGlzIGNhbGxlZCcsICgpID0+IHtcclxuICAgICAgICAvLyBHSVZFTlxyXG4gICAgICAgIGNvbnN0IG1vY2tNb2RhbFJlZjogTW9ja05nYk1vZGFsUmVmID0gbmV3IE1vY2tOZ2JNb2RhbFJlZigpO1xyXG4gICAgICAgIHNweU9uKG1vZGFsU2VydmljZSwgJ29wZW4nKS5hbmQucmV0dXJuVmFsdWUobW9ja01vZGFsUmVmKTtcclxuXHJcbiAgICAgICAgLy8gV0hFTlxyXG4gICAgICAgIHNlcnZpY2Uub3BlbigpO1xyXG5cclxuICAgICAgICAvLyBUSEVOXHJcbiAgICAgICAgZXhwZWN0KG1vZGFsU2VydmljZS5vcGVuKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaXQoJ1Nob3VsZCBjYWxsIG9wZW4gbWV0aG9kIGZvciBOZ2JNb2RhbCBvbmUgdGltZSB3aGVuIG9wZW4gbWV0aG9kIGlzIGNhbGxlZCB0d2ljZScsICgpID0+IHtcclxuICAgICAgICAvLyBHSVZFTlxyXG4gICAgICAgIGNvbnN0IG1vY2tNb2RhbFJlZjogTW9ja05nYk1vZGFsUmVmID0gbmV3IE1vY2tOZ2JNb2RhbFJlZigpO1xyXG4gICAgICAgIHNweU9uKG1vZGFsU2VydmljZSwgJ29wZW4nKS5hbmQucmV0dXJuVmFsdWUobW9ja01vZGFsUmVmKTtcclxuXHJcbiAgICAgICAgLy8gV0hFTlxyXG4gICAgICAgIHNlcnZpY2Uub3BlbigpO1xyXG4gICAgICAgIHNlcnZpY2Uub3BlbigpO1xyXG5cclxuICAgICAgICAvLyBUSEVOXHJcbiAgICAgICAgZXhwZWN0KG1vZGFsU2VydmljZS5vcGVuKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=