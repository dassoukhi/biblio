{"file":"C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\entities\\exemplaire\\exemplaire-update.component.spec.ts","mappings":";;AAAA,mDAAmF;AACnF,+CAAoD;AACpD,0CAA6C;AAC7C,+BAA0B;AAE1B,sDAAwD;AACxD,qGAAgG;AAChG,mFAA+E;AAC/E,wEAA+D;AAE/D,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,wCAAwC,EAAE,GAAG,EAAE;QACtD,IAAI,IAA+B,CAAC;QACpC,IAAI,OAAoD,CAAC;QACzD,IAAI,OAA0B,CAAC;QAE/B,UAAU,CAAC,GAAG,EAAE;YACd,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,OAAO,EAAE,CAAC,8BAAgB,CAAC;gBAC3B,YAAY,EAAE,CAAC,uDAAyB,CAAC;gBACzC,SAAS,EAAE,CAAC,mBAAW,CAAC;aACzB,CAAC;iBACC,gBAAgB,CAAC,uDAAyB,EAAE,EAAE,CAAC;iBAC/C,iBAAiB,EAAE,CAAC;YAEvB,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,uDAAyB,CAAC,CAAC;YAC7D,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACjC,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,sCAAiB,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;YACpB,EAAE,CAAC,wDAAwD,EAAE,mBAAS,CAAC,GAAG,EAAE;gBAC1E,QAAQ;gBACR,MAAM,MAAM,GAAG,IAAI,6BAAU,CAAC,GAAG,CAAC,CAAC;gBACnC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,IAAI,mBAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACxB,OAAO;gBACP,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,cAAI,EAAE,CAAC,CAAC,iBAAiB;gBAEzB,OAAO;gBACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,CAAC;YAEJ,EAAE,CAAC,mDAAmD,EAAE,mBAAS,CAAC,GAAG,EAAE;gBACrE,QAAQ;gBACR,MAAM,MAAM,GAAG,IAAI,6BAAU,EAAE,CAAC;gBAChC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAE,CAAC,IAAI,mBAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACxB,OAAO;gBACP,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,cAAI,EAAE,CAAC,CAAC,iBAAiB;gBAEzB,OAAO;gBACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\entities\\exemplaire\\exemplaire-update.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\n\r\nimport { BiblioTestModule } from '../../../test.module';\r\nimport { ExemplaireUpdateComponent } from 'app/entities/exemplaire/exemplaire-update.component';\r\nimport { ExemplaireService } from 'app/entities/exemplaire/exemplaire.service';\r\nimport { Exemplaire } from 'app/shared/model/exemplaire.model';\r\n\r\ndescribe('Component Tests', () => {\r\n  describe('Exemplaire Management Update Component', () => {\r\n    let comp: ExemplaireUpdateComponent;\r\n    let fixture: ComponentFixture<ExemplaireUpdateComponent>;\r\n    let service: ExemplaireService;\r\n\r\n    beforeEach(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [BiblioTestModule],\r\n        declarations: [ExemplaireUpdateComponent],\r\n        providers: [FormBuilder],\r\n      })\r\n        .overrideTemplate(ExemplaireUpdateComponent, '')\r\n        .compileComponents();\r\n\r\n      fixture = TestBed.createComponent(ExemplaireUpdateComponent);\r\n      comp = fixture.componentInstance;\r\n      service = fixture.debugElement.injector.get(ExemplaireService);\r\n    });\r\n\r\n    describe('save', () => {\r\n      it('Should call update service on save for existing entity', fakeAsync(() => {\r\n        // GIVEN\r\n        const entity = new Exemplaire(123);\r\n        spyOn(service, 'update').and.returnValue(of(new HttpResponse({ body: entity })));\r\n        comp.updateForm(entity);\r\n        // WHEN\r\n        comp.save();\r\n        tick(); // simulate async\r\n\r\n        // THEN\r\n        expect(service.update).toHaveBeenCalledWith(entity);\r\n        expect(comp.isSaving).toEqual(false);\r\n      }));\r\n\r\n      it('Should call create service on save for new entity', fakeAsync(() => {\r\n        // GIVEN\r\n        const entity = new Exemplaire();\r\n        spyOn(service, 'create').and.returnValue(of(new HttpResponse({ body: entity })));\r\n        comp.updateForm(entity);\r\n        // WHEN\r\n        comp.save();\r\n        tick(); // simulate async\r\n\r\n        // THEN\r\n        expect(service.create).toHaveBeenCalledWith(entity);\r\n        expect(comp.isSaving).toEqual(false);\r\n      }));\r\n    });\r\n  });\r\n});\r\n"],"version":3}