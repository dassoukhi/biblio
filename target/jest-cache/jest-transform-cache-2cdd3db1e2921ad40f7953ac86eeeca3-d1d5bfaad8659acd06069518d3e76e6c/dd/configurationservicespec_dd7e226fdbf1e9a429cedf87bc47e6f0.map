{"file":"C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\admin\\configuration\\configuration.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\admin\\configuration\\configuration.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\n\r\nimport { ConfigurationService, ConfigProps, Env, Bean, PropertySource } from 'app/admin/configuration/configuration.service';\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\n\r\ndescribe('Service Tests', () => {\r\n  describe('Logs Service', () => {\r\n    let service: ConfigurationService;\r\n    let httpMock: HttpTestingController;\r\n    let expectedResult: Bean[] | PropertySource[] | null;\r\n\r\n    beforeEach(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [HttpClientTestingModule],\r\n      });\r\n\r\n      expectedResult = null;\r\n      service = TestBed.get(ConfigurationService);\r\n      httpMock = TestBed.get(HttpTestingController);\r\n    });\r\n\r\n    afterEach(() => {\r\n      httpMock.verify();\r\n    });\r\n\r\n    describe('Service methods', () => {\r\n      it('should call correct URL', () => {\r\n        service.getBeans().subscribe();\r\n\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n        const resourceUrl = SERVER_API_URL + 'management/configprops';\r\n        expect(req.request.url).toEqual(resourceUrl);\r\n      });\r\n\r\n      it('should get the config', () => {\r\n        const bean: Bean = {\r\n          prefix: 'jhipster',\r\n          properties: {\r\n            clientApp: {\r\n              name: 'jhipsterApp',\r\n            },\r\n          },\r\n        };\r\n        const configProps: ConfigProps = {\r\n          contexts: {\r\n            jhipster: {\r\n              beans: {\r\n                'io.github.jhipster.config.JHipsterProperties': bean,\r\n              },\r\n            },\r\n          },\r\n        };\r\n        service.getBeans().subscribe(received => (expectedResult = received));\r\n\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n        req.flush(configProps);\r\n        expect(expectedResult).toEqual([bean]);\r\n      });\r\n\r\n      it('should get the env', () => {\r\n        const propertySources: PropertySource[] = [\r\n          {\r\n            name: 'server.ports',\r\n            properties: {\r\n              'local.server.port': {\r\n                value: '8080',\r\n              },\r\n            },\r\n          },\r\n        ];\r\n        const env: Env = { propertySources };\r\n        service.getPropertySources().subscribe(received => (expectedResult = received));\r\n\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n        req.flush(env);\r\n        expect(expectedResult).toEqual(propertySources);\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"version":3}