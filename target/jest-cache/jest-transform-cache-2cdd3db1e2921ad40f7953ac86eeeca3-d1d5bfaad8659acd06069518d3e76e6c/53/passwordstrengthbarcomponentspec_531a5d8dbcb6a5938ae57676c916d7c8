63c08e0f177bdd22387720ffd792da8b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const password_strength_bar_component_1 = require("app/account/password/password-strength-bar.component");
describe('Component Tests', () => {
    describe('PasswordStrengthBarComponent', () => {
        let comp;
        let fixture;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                declarations: [password_strength_bar_component_1.PasswordStrengthBarComponent],
            })
                .overrideTemplate(password_strength_bar_component_1.PasswordStrengthBarComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(password_strength_bar_component_1.PasswordStrengthBarComponent);
            comp = fixture.componentInstance;
        });
        describe('PasswordStrengthBarComponents', () => {
            it('should initialize with default values', () => {
                expect(comp.measureStrength('')).toBe(0);
                expect(comp.colors).toEqual(['#F00', '#F90', '#FF0', '#9F0', '#0F0']);
                expect(comp.getColor(0).idx).toBe(1);
                expect(comp.getColor(0).color).toBe(comp.colors[0]);
            });
            it('should increase strength upon password value change', () => {
                expect(comp.measureStrength('')).toBe(0);
                expect(comp.measureStrength('aa')).toBeGreaterThanOrEqual(comp.measureStrength(''));
                expect(comp.measureStrength('aa^6')).toBeGreaterThanOrEqual(comp.measureStrength('aa'));
                expect(comp.measureStrength('Aa090(**)')).toBeGreaterThanOrEqual(comp.measureStrength('aa^6'));
                expect(comp.measureStrength('Aa090(**)+-07365')).toBeGreaterThanOrEqual(comp.measureStrength('Aa090(**)'));
            });
            it('should change the color based on strength', () => {
                expect(comp.getColor(0).color).toBe(comp.colors[0]);
                expect(comp.getColor(11).color).toBe(comp.colors[1]);
                expect(comp.getColor(22).color).toBe(comp.colors[2]);
                expect(comp.getColor(33).color).toBe(comp.colors[3]);
                expect(comp.getColor(44).color).toBe(comp.colors[4]);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxwYXNzd29yZFxccGFzc3dvcmQtc3RyZW5ndGgtYmFyLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXlFO0FBRXpFLDBHQUFvRztBQUVwRyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDNUMsSUFBSSxJQUFrQyxDQUFDO1FBQ3ZDLElBQUksT0FBdUQsQ0FBQztRQUU1RCxVQUFVLENBQUMsZUFBSyxDQUFDLEdBQUcsRUFBRTtZQUNwQixpQkFBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QixZQUFZLEVBQUUsQ0FBQyw4REFBNEIsQ0FBQzthQUM3QyxDQUFDO2lCQUNDLGdCQUFnQixDQUFDLDhEQUE0QixFQUFFLEVBQUUsQ0FBQztpQkFDbEQsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRUosVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyw4REFBNEIsQ0FBQyxDQUFDO1lBQ2hFLElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1lBQzdDLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7Z0JBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUN0RSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEQsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMscURBQXFELEVBQUUsR0FBRyxFQUFFO2dCQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BGLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUN4RixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDL0YsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUM3RyxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUU7Z0JBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxwYXNzd29yZFxccGFzc3dvcmQtc3RyZW5ndGgtYmFyLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGFzeW5jIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcclxuXHJcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQgfSBmcm9tICdhcHAvYWNjb3VudC9wYXNzd29yZC9wYXNzd29yZC1zdHJlbmd0aC1iYXIuY29tcG9uZW50JztcclxuXHJcbmRlc2NyaWJlKCdDb21wb25lbnQgVGVzdHMnLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ1Bhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgICBsZXQgY29tcDogUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudDtcclxuICAgIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPFBhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQ+O1xyXG5cclxuICAgIGJlZm9yZUVhY2goYXN5bmMoKCkgPT4ge1xyXG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xyXG4gICAgICAgIGRlY2xhcmF0aW9uczogW1Bhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnRdLFxyXG4gICAgICB9KVxyXG4gICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKFBhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQsICcnKVxyXG4gICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xyXG4gICAgfSkpO1xyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudCk7XHJcbiAgICAgIGNvbXAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoJ1Bhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnRzJywgKCkgPT4ge1xyXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBkZWZhdWx0IHZhbHVlcycsICgpID0+IHtcclxuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJycpKS50b0JlKDApO1xyXG4gICAgICAgIGV4cGVjdChjb21wLmNvbG9ycykudG9FcXVhbChbJyNGMDAnLCAnI0Y5MCcsICcjRkYwJywgJyM5RjAnLCAnIzBGMCddKTtcclxuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigwKS5pZHgpLnRvQmUoMSk7XHJcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoMCkuY29sb3IpLnRvQmUoY29tcC5jb2xvcnNbMF0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGl0KCdzaG91bGQgaW5jcmVhc2Ugc3RyZW5ndGggdXBvbiBwYXNzd29yZCB2YWx1ZSBjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCcnKSkudG9CZSgwKTtcclxuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ2FhJykpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoY29tcC5tZWFzdXJlU3RyZW5ndGgoJycpKTtcclxuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ2FhXjYnKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChjb21wLm1lYXN1cmVTdHJlbmd0aCgnYWEnKSk7XHJcbiAgICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdBYTA5MCgqKiknKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChjb21wLm1lYXN1cmVTdHJlbmd0aCgnYWFeNicpKTtcclxuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ0FhMDkwKCoqKSstMDczNjUnKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChjb21wLm1lYXN1cmVTdHJlbmd0aCgnQWEwOTAoKiopJykpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRoZSBjb2xvciBiYXNlZCBvbiBzdHJlbmd0aCcsICgpID0+IHtcclxuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigwKS5jb2xvcikudG9CZShjb21wLmNvbG9yc1swXSk7XHJcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoMTEpLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzFdKTtcclxuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigyMikuY29sb3IpLnRvQmUoY29tcC5jb2xvcnNbMl0pO1xyXG4gICAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDMzKS5jb2xvcikudG9CZShjb21wLmNvbG9yc1szXSk7XHJcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoNDQpLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzRdKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==