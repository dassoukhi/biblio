ed153222345f3aa03cbbb2b55ec93019
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const platform_browser_1 = require("@angular/platform-browser");
const rxjs_1 = require("rxjs");
const main_component_1 = require("app/layouts/main/main.component");
const test_module_1 = require("../../../test.module");
describe('Component Tests', () => {
    describe('MainComponent', () => {
        let comp;
        let fixture;
        let router;
        const routerEventsSubject = new rxjs_1.Subject();
        let titleService;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.BiblioTestModule],
                declarations: [main_component_1.MainComponent],
                providers: [platform_browser_1.Title],
            })
                .overrideTemplate(main_component_1.MainComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(main_component_1.MainComponent);
            comp = fixture.componentInstance;
            router = testing_1.TestBed.get(router_1.Router);
            router.setEvents(routerEventsSubject.asObservable());
            titleService = testing_1.TestBed.get(platform_browser_1.Title);
        });
        describe('page title', () => {
            let routerState;
            const defaultPageTitle = 'Biblio';
            const parentRoutePageTitle = 'parentTitle';
            const childRoutePageTitle = 'childTitle';
            const navigationEnd = new router_1.NavigationEnd(1, '', '');
            beforeEach(() => {
                routerState = { snapshot: { root: {} } };
                router.setRouterState(routerState);
                spyOn(titleService, 'setTitle');
                comp.ngOnInit();
            });
            describe('navigation end', () => {
                it('should set page title to default title if pageTitle is missing on routes', () => {
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle);
                });
                it('should set page title to root route pageTitle if there is no child routes', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle);
                });
                it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle);
                });
                it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: {} };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle);
                });
                it('should set page title to parent route pageTitle if child routes exists but data is not set for child route', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = {};
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle);
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,