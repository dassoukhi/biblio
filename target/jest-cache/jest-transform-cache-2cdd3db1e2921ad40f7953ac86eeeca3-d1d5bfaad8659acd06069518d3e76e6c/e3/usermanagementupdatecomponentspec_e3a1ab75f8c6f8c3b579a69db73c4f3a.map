{"file":"C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\admin\\user-management\\user-management-update.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\admin\\user-management\\user-management-update.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, async, inject, fakeAsync, tick } from '@angular/core/testing';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { of } from 'rxjs';\r\n\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { BiblioTestModule } from '../../../test.module';\r\nimport { UserManagementUpdateComponent } from 'app/admin/user-management/user-management-update.component';\r\nimport { UserService } from 'app/core/user/user.service';\r\nimport { User } from 'app/core/user/user.model';\r\n\r\ndescribe('Component Tests', () => {\r\n  describe('User Management Update Component', () => {\r\n    let comp: UserManagementUpdateComponent;\r\n    let fixture: ComponentFixture<UserManagementUpdateComponent>;\r\n    let service: UserService;\r\n    const route: ActivatedRoute = ({\r\n      data: of({ user: new User(1, 'user', 'first', 'last', 'first@last.com', true, 'en', [Authority.USER], 'admin') }),\r\n    } as any) as ActivatedRoute;\r\n\r\n    beforeEach(async(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [BiblioTestModule],\r\n        declarations: [UserManagementUpdateComponent],\r\n        providers: [\r\n          FormBuilder,\r\n          {\r\n            provide: ActivatedRoute,\r\n            useValue: route,\r\n          },\r\n        ],\r\n      })\r\n        .overrideTemplate(UserManagementUpdateComponent, '')\r\n        .compileComponents();\r\n    }));\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(UserManagementUpdateComponent);\r\n      comp = fixture.componentInstance;\r\n      service = fixture.debugElement.injector.get(UserService);\r\n    });\r\n\r\n    describe('OnInit', () => {\r\n      it('Should load authorities and language on init', inject(\r\n        [],\r\n        fakeAsync(() => {\r\n          // GIVEN\r\n          spyOn(service, 'authorities').and.returnValue(of(['USER']));\r\n\r\n          // WHEN\r\n          comp.ngOnInit();\r\n\r\n          // THEN\r\n          expect(service.authorities).toHaveBeenCalled();\r\n          expect(comp.authorities).toEqual(['USER']);\r\n        })\r\n      ));\r\n    });\r\n\r\n    describe('save', () => {\r\n      it('Should call update service on save for existing user', inject(\r\n        [],\r\n        fakeAsync(() => {\r\n          // GIVEN\r\n          const entity = new User(123);\r\n          spyOn(service, 'update').and.returnValue(\r\n            of(\r\n              new HttpResponse({\r\n                body: entity,\r\n              })\r\n            )\r\n          );\r\n          comp.user = entity;\r\n          comp.editForm.patchValue({ id: entity.id });\r\n          // WHEN\r\n          comp.save();\r\n          tick(); // simulate async\r\n\r\n          // THEN\r\n          expect(service.update).toHaveBeenCalledWith(entity);\r\n          expect(comp.isSaving).toEqual(false);\r\n        })\r\n      ));\r\n\r\n      it('Should call create service on save for new user', inject(\r\n        [],\r\n        fakeAsync(() => {\r\n          // GIVEN\r\n          const entity = new User();\r\n          spyOn(service, 'create').and.returnValue(of(new HttpResponse({ body: entity })));\r\n          comp.user = entity;\r\n          // WHEN\r\n          comp.save();\r\n          tick(); // simulate async\r\n\r\n          // THEN\r\n          expect(service.create).toHaveBeenCalledWith(entity);\r\n          expect(comp.isSaving).toEqual(false);\r\n        })\r\n      ));\r\n    });\r\n  });\r\n});\r\n"],"version":3}