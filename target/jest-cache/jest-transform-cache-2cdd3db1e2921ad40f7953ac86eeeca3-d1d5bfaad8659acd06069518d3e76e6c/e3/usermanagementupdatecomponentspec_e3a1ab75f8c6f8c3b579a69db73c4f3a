be1bb45e4f8e39c9bfc4bfb4e57f66df
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const authority_constants_1 = require("app/shared/constants/authority.constants");
const test_module_1 = require("../../../test.module");
const user_management_update_component_1 = require("app/admin/user-management/user-management-update.component");
const user_service_1 = require("app/core/user/user.service");
const user_model_1 = require("app/core/user/user.model");
describe('Component Tests', () => {
    describe('User Management Update Component', () => {
        let comp;
        let fixture;
        let service;
        const route = {
            data: rxjs_1.of({ user: new user_model_1.User(1, 'user', 'first', 'last', 'first@last.com', true, 'en', [authority_constants_1.Authority.USER], 'admin') }),
        };
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.BiblioTestModule],
                declarations: [user_management_update_component_1.UserManagementUpdateComponent],
                providers: [
                    forms_1.FormBuilder,
                    {
                        provide: router_1.ActivatedRoute,
                        useValue: route,
                    },
                ],
            })
                .overrideTemplate(user_management_update_component_1.UserManagementUpdateComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(user_management_update_component_1.UserManagementUpdateComponent);
            comp = fixture.componentInstance;
            service = fixture.debugElement.injector.get(user_service_1.UserService);
        });
        describe('OnInit', () => {
            it('Should load authorities and language on init', testing_1.inject([], testing_1.fakeAsync(() => {
                // GIVEN
                spyOn(service, 'authorities').and.returnValue(rxjs_1.of(['USER']));
                // WHEN
                comp.ngOnInit();
                // THEN
                expect(service.authorities).toHaveBeenCalled();
                expect(comp.authorities).toEqual(['USER']);
            })));
        });
        describe('save', () => {
            it('Should call update service on save for existing user', testing_1.inject([], testing_1.fakeAsync(() => {
                // GIVEN
                const entity = new user_model_1.User(123);
                spyOn(service, 'update').and.returnValue(rxjs_1.of(new http_1.HttpResponse({
                    body: entity,
                })));
                comp.user = entity;
                comp.editForm.patchValue({ id: entity.id });
                // WHEN
                comp.save();
                testing_1.tick(); // simulate async
                // THEN
                expect(service.update).toHaveBeenCalledWith(entity);
                expect(comp.isSaving).toEqual(false);
            })));
            it('Should call create service on save for new user', testing_1.inject([], testing_1.fakeAsync(() => {
                // GIVEN
                const entity = new user_model_1.User();
                spyOn(service, 'create').and.returnValue(rxjs_1.of(new http_1.HttpResponse({ body: entity })));
                comp.user = entity;
                // WHEN
                comp.save();
                testing_1.tick(); // simulate async
                // THEN
                expect(service.create).toHaveBeenCalledWith(entity);
                expect(comp.isSaving).toEqual(false);
            })));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,