fdcd862996027240b5158ed39fa5c955
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRouter = exports.MockActivatedRoute = void 0;
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const spyobject_1 = require("./spyobject");
class MockActivatedRoute extends router_1.ActivatedRoute {
    constructor(parameters) {
        super();
        this.queryParamsSubject = new rxjs_1.ReplaySubject();
        this.paramSubject = new rxjs_1.ReplaySubject();
        this.dataSubject = new rxjs_1.ReplaySubject();
        this.queryParams = this.queryParamsSubject.asObservable();
        this.params = this.paramSubject.asObservable();
        this.data = this.dataSubject.asObservable();
        this.setParameters(parameters);
    }
    setParameters(parameters) {
        this.queryParamsSubject.next(parameters);
        this.paramSubject.next(parameters);
        this.dataSubject.next(Object.assign(Object.assign({}, parameters), { defaultSort: 'id,desc' }));
    }
}
exports.MockActivatedRoute = MockActivatedRoute;
class MockRouter extends spyobject_1.SpyObject {
    constructor() {
        super(router_1.Router);
        this.events = null;
        this.url = '';
        this.navigateSpy = this.spy('navigate');
        this.navigateByUrlSpy = this.spy('navigateByUrl');
    }
    setEvents(events) {
        this.events = events;
    }
    setRouterState(routerState) {
        this.routerState = routerState;
    }
}
exports.MockRouter = MockRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcaGVscGVyc1xcbW9jay1yb3V0ZS5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7OztBQUNBLDRDQUFvRjtBQUNwRiwrQkFBaUQ7QUFFakQsMkNBQXdDO0FBRXhDLE1BQWEsa0JBQW1CLFNBQVEsdUJBQWM7SUFLcEQsWUFBWSxVQUFrQjtRQUM1QixLQUFLLEVBQUUsQ0FBQztRQUxGLHVCQUFrQixHQUFHLElBQUksb0JBQWEsRUFBVSxDQUFDO1FBQ2pELGlCQUFZLEdBQUcsSUFBSSxvQkFBYSxFQUFVLENBQUM7UUFDM0MsZ0JBQVcsR0FBRyxJQUFJLG9CQUFhLEVBQVEsQ0FBQztRQUk5QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELGFBQWEsQ0FBQyxVQUFrQjtRQUM5QixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxpQ0FDaEIsVUFBVSxLQUNiLFdBQVcsRUFBRSxTQUFTLElBQ3RCLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFyQkQsZ0RBcUJDO0FBRUQsTUFBYSxVQUFXLFNBQVEscUJBQVM7SUFPdkM7UUFDRSxLQUFLLENBQUMsZUFBTSxDQUFDLENBQUM7UUFMaEIsV0FBTSxHQUFtQyxJQUFJLENBQUM7UUFFOUMsUUFBRyxHQUFHLEVBQUUsQ0FBQztRQUlQLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQStCO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxjQUFjLENBQUMsV0FBZ0I7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDakMsQ0FBQztDQUNGO0FBcEJELGdDQW9CQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXERhc3NcXERlc2t0b3BcXE1hc3RlcjFfWU5PVlxcRGV2TG9naWNpZWxcXGJpYmxpb1xcc3JjXFx0ZXN0XFxqYXZhc2NyaXB0XFxzcGVjXFxoZWxwZXJzXFxtb2NrLXJvdXRlLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNweSA9IGphc21pbmUuU3B5O1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyLCBSb3V0ZXJFdmVudCwgRGF0YSwgUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgU3B5T2JqZWN0IH0gZnJvbSAnLi9zcHlvYmplY3QnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vY2tBY3RpdmF0ZWRSb3V0ZSBleHRlbmRzIEFjdGl2YXRlZFJvdXRlIHtcclxuICBwcml2YXRlIHF1ZXJ5UGFyYW1zU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PFBhcmFtcz4oKTtcclxuICBwcml2YXRlIHBhcmFtU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PFBhcmFtcz4oKTtcclxuICBwcml2YXRlIGRhdGFTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8RGF0YT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocGFyYW1ldGVyczogUGFyYW1zKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5xdWVyeVBhcmFtcyA9IHRoaXMucXVlcnlQYXJhbXNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgdGhpcy5wYXJhbXMgPSB0aGlzLnBhcmFtU3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB0aGlzLnNldFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XHJcbiAgfVxyXG5cclxuICBzZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnM6IFBhcmFtcyk6IHZvaWQge1xyXG4gICAgdGhpcy5xdWVyeVBhcmFtc1N1YmplY3QubmV4dChwYXJhbWV0ZXJzKTtcclxuICAgIHRoaXMucGFyYW1TdWJqZWN0Lm5leHQocGFyYW1ldGVycyk7XHJcbiAgICB0aGlzLmRhdGFTdWJqZWN0Lm5leHQoe1xyXG4gICAgICAuLi5wYXJhbWV0ZXJzLFxyXG4gICAgICBkZWZhdWx0U29ydDogJ2lkLGRlc2MnLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTW9ja1JvdXRlciBleHRlbmRzIFNweU9iamVjdCB7XHJcbiAgbmF2aWdhdGVTcHk6IFNweTtcclxuICBuYXZpZ2F0ZUJ5VXJsU3B5OiBTcHk7XHJcbiAgZXZlbnRzOiBPYnNlcnZhYmxlPFJvdXRlckV2ZW50PiB8IG51bGwgPSBudWxsO1xyXG4gIHJvdXRlclN0YXRlOiBhbnk7XHJcbiAgdXJsID0gJyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoUm91dGVyKTtcclxuICAgIHRoaXMubmF2aWdhdGVTcHkgPSB0aGlzLnNweSgnbmF2aWdhdGUnKTtcclxuICAgIHRoaXMubmF2aWdhdGVCeVVybFNweSA9IHRoaXMuc3B5KCduYXZpZ2F0ZUJ5VXJsJyk7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudHMoZXZlbnRzOiBPYnNlcnZhYmxlPFJvdXRlckV2ZW50Pik6IHZvaWQge1xyXG4gICAgdGhpcy5ldmVudHMgPSBldmVudHM7XHJcbiAgfVxyXG5cclxuICBzZXRSb3V0ZXJTdGF0ZShyb3V0ZXJTdGF0ZTogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLnJvdXRlclN0YXRlID0gcm91dGVyU3RhdGU7XHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==