1cfde71a3dabafac73c2de47c2900cc5
"use strict";

/* istanbul ignore next */
function cov_1zudhixybp() {
  var path = "C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\main\\webapp\\app\\admin\\health\\health.service.ts";
  var hash = "083064b3b11ebadf5ab4db4eda3d182218f309c8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\main\\webapp\\app\\admin\\health\\health.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 31
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 46
        }
      },
      "5": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 52
        }
      },
      "6": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 15,
          column: 1
        }
      },
      "7": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 25
        }
      },
      "8": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 83
        }
      },
      "9": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 19,
          column: 18
        }
      },
      "10": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 20,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 22
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    inputSourceMap: {
      file: "C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\main\\webapp\\app\\admin\\health\\health.service.ts",
      mappings: ";;;;AAAA,wCAA2C;AAC3C,+CAAkD;AAGlD,qDAAmD;AAmBnD,IAAa,aAAa,GAA1B,MAAa,aAAa;IACxB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,WAAW;QACT,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,8BAAc,GAAG,mBAAmB,CAAC,CAAC;IACrE,CAAC;CACF,CAAA;AANY,aAAa;IADzB,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;6CAEP,iBAAU;GADzB,aAAa,CAMzB;AANY,sCAAa",
      names: [],
      sources: ["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\main\\webapp\\app\\admin\\health\\health.service.ts"],
      sourcesContent: ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\n\r\nexport type HealthStatus = 'UP' | 'DOWN' | 'UNKNOWN' | 'OUT_OF_SERVICE';\r\n\r\nexport type HealthKey = 'diskSpace' | 'mail' | 'ping' | 'db';\r\n\r\nexport interface Health {\r\n  status: HealthStatus;\r\n  components: {\r\n    [key in HealthKey]?: HealthDetails;\r\n  };\r\n}\r\n\r\nexport interface HealthDetails {\r\n  status: HealthStatus;\r\n  details: any;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HealthService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  checkHealth(): Observable<Health> {\r\n    return this.http.get<Health>(SERVER_API_URL + 'management/health');\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "083064b3b11ebadf5ab4db4eda3d182218f309c8"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zudhixybp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1zudhixybp();
cov_1zudhixybp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1zudhixybp().s[1]++;
exports.HealthService = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_1zudhixybp().s[2]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_1zudhixybp().s[3]++, require("@angular/core"));
const http_1 =
/* istanbul ignore next */
(cov_1zudhixybp().s[4]++, require("@angular/common/http"));
const app_constants_1 =
/* istanbul ignore next */
(cov_1zudhixybp().s[5]++, require("app/app.constants"));

/* istanbul ignore next */
cov_1zudhixybp().s[6]++;
let HealthService = class HealthService {
  constructor(http) {
    /* istanbul ignore next */
    cov_1zudhixybp().f[0]++;
    cov_1zudhixybp().s[7]++;
    this.http = http;
  }

  checkHealth() {
    /* istanbul ignore next */
    cov_1zudhixybp().f[1]++;
    cov_1zudhixybp().s[8]++;
    return this.http.get(app_constants_1.SERVER_API_URL + 'management/health');
  }

};

/* istanbul ignore next */
cov_1zudhixybp().s[9]++;
HealthService = tslib_1.__decorate([core_1.Injectable({
  providedIn: 'root'
}), tslib_1.__metadata("design:paramtypes", [http_1.HttpClient])], HealthService);

/* istanbul ignore next */
cov_1zudhixybp().s[10]++;
exports.HealthService = HealthService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcRGFzc1xcRGVza3RvcFxcTWFzdGVyMV9ZTk9WXFxEZXZMb2dpY2llbFxcYmlibGlvXFxzcmNcXG1haW5cXHdlYmFwcFxcYXBwXFxhZG1pblxcaGVhbHRoXFxoZWFsdGguc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QmE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdkJiLE1BQUEsTUFBQTtBQUFBO0FBQUEsMEJBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBO0FBQ0EsTUFBQSxNQUFBO0FBQUE7QUFBQSwwQkFBQSxPQUFBLENBQUEsc0JBQUEsQ0FBQSxDQUFBO0FBR0EsTUFBQSxlQUFBO0FBQUE7QUFBQSwwQkFBQSxPQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBOzs7O0FBbUJBLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWIsQ0FBMEI7QUFDeEIsRUFBQSxXQUFBLENBQW9CLElBQXBCLEVBQW9DO0FBQUE7QUFBQTtBQUFBO0FBQWhCLFNBQUEsSUFBQSxHQUFBLElBQUE7QUFBb0I7O0FBRXhDLEVBQUEsV0FBVyxHQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ1QsV0FBTyxLQUFLLElBQUwsQ0FBVSxHQUFWLENBQXNCLGVBQUEsQ0FBQSxjQUFBLEdBQWlCLG1CQUF2QyxDQUFQO0FBQ0Q7O0FBTHVCLENBQTFCOzs7O0FBQWEsYUFBYSxHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FEekIsTUFBQSxDQUFBLFVBQUEsQ0FBVztBQUFFLEVBQUEsVUFBVSxFQUFFO0FBQWQsQ0FBWCxDQUN5QixFLHlDQUNFLE1BQUEsQ0FBQSxVLEVBREYsQ0FBQSxFQUFiLGFBQWEsQ0FBYjs7OztBQUFBLE9BQUEsQ0FBQSxhQUFBLEdBQUEsYUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgU0VSVkVSX0FQSV9VUkwgfSBmcm9tICdhcHAvYXBwLmNvbnN0YW50cyc7XHJcblxyXG5leHBvcnQgdHlwZSBIZWFsdGhTdGF0dXMgPSAnVVAnIHwgJ0RPV04nIHwgJ1VOS05PV04nIHwgJ09VVF9PRl9TRVJWSUNFJztcclxuXHJcbmV4cG9ydCB0eXBlIEhlYWx0aEtleSA9ICdkaXNrU3BhY2UnIHwgJ21haWwnIHwgJ3BpbmcnIHwgJ2RiJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoIHtcclxuICBzdGF0dXM6IEhlYWx0aFN0YXR1cztcclxuICBjb21wb25lbnRzOiB7XHJcbiAgICBba2V5IGluIEhlYWx0aEtleV0/OiBIZWFsdGhEZXRhaWxzO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoRGV0YWlscyB7XHJcbiAgc3RhdHVzOiBIZWFsdGhTdGF0dXM7XHJcbiAgZGV0YWlsczogYW55O1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgSGVhbHRoU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxyXG5cclxuICBjaGVja0hlYWx0aCgpOiBPYnNlcnZhYmxlPEhlYWx0aD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8SGVhbHRoPihTRVJWRVJfQVBJX1VSTCArICdtYW5hZ2VtZW50L2hlYWx0aCcpO1xyXG4gIH1cclxufVxyXG4iXX0=