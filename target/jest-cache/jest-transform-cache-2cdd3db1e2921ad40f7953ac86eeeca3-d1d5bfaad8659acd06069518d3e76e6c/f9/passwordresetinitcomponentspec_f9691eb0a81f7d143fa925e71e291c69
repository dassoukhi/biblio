6929c79f2bef3dd5cea0ec93d735c9db
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../../test.module");
const password_reset_init_component_1 = require("app/account/password-reset/init/password-reset-init.component");
const password_reset_init_service_1 = require("app/account/password-reset/init/password-reset-init.service");
describe('Component Tests', () => {
    describe('PasswordResetInitComponent', () => {
        let fixture;
        let comp;
        beforeEach(() => {
            fixture = testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.BiblioTestModule],
                declarations: [password_reset_init_component_1.PasswordResetInitComponent],
                providers: [forms_1.FormBuilder],
            })
                .overrideTemplate(password_reset_init_component_1.PasswordResetInitComponent, '')
                .createComponent(password_reset_init_component_1.PasswordResetInitComponent);
            comp = fixture.componentInstance;
        });
        it('sets focus after the view has been initialized', () => {
            const node = {
                focus() { },
            };
            comp.email = new core_1.ElementRef(node);
            spyOn(node, 'focus');
            comp.ngAfterViewInit();
            expect(node.focus).toHaveBeenCalled();
        });
        it('notifies of success upon successful requestReset', testing_1.inject([password_reset_init_service_1.PasswordResetInitService], (service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.of({}));
            comp.resetRequestForm.patchValue({
                email: 'user@domain.com',
            });
            comp.requestReset();
            expect(service.save).toHaveBeenCalledWith('user@domain.com');
            expect(comp.success).toBe(true);
        }));
        it('no notification of success upon error response', testing_1.inject([password_reset_init_service_1.PasswordResetInitService], (service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.throwError({
                status: 503,
                data: 'something else',
            }));
            comp.resetRequestForm.patchValue({
                email: 'user@domain.com',
            });
            comp.requestReset();
            expect(service.save).toHaveBeenCalledWith('user@domain.com');
            expect(comp.success).toBe(false);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxwYXNzd29yZC1yZXNldFxcaW5pdFxccGFzc3dvcmQtcmVzZXQtaW5pdC5jb21wb25lbnQuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHdDQUEyQztBQUMzQyxtREFBMEU7QUFDMUUsMENBQTZDO0FBQzdDLCtCQUFzQztBQUV0Qyx5REFBMkQ7QUFDM0QsaUhBQTJHO0FBQzNHLDZHQUF1RztBQUV2RyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7UUFDMUMsSUFBSSxPQUFxRCxDQUFDO1FBQzFELElBQUksSUFBZ0MsQ0FBQztRQUVyQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQ3ZDLE9BQU8sRUFBRSxDQUFDLDhCQUFnQixDQUFDO2dCQUMzQixZQUFZLEVBQUUsQ0FBQywwREFBMEIsQ0FBQztnQkFDMUMsU0FBUyxFQUFFLENBQUMsbUJBQVcsQ0FBQzthQUN6QixDQUFDO2lCQUNDLGdCQUFnQixDQUFDLDBEQUEwQixFQUFFLEVBQUUsQ0FBQztpQkFDaEQsZUFBZSxDQUFDLDBEQUEwQixDQUFDLENBQUM7WUFDL0MsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7WUFDeEQsTUFBTSxJQUFJLEdBQUc7Z0JBQ1gsS0FBSyxLQUFVLENBQUM7YUFDakIsQ0FBQztZQUNGLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxpQkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFckIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBRXZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxnQkFBTSxDQUFDLENBQUMsc0RBQXdCLENBQUMsRUFBRSxDQUFDLE9BQWlDLEVBQUUsRUFBRTtZQUM5SCxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztnQkFDL0IsS0FBSyxFQUFFLGlCQUFpQjthQUN6QixDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFFcEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixFQUFFLENBQUMsZ0RBQWdELEVBQUUsZ0JBQU0sQ0FBQyxDQUFDLHNEQUF3QixDQUFDLEVBQUUsQ0FBQyxPQUFpQyxFQUFFLEVBQUU7WUFDNUgsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUNwQyxpQkFBVSxDQUFDO2dCQUNULE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRSxnQkFBZ0I7YUFDdkIsQ0FBQyxDQUNILENBQUM7WUFDRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO2dCQUMvQixLQUFLLEVBQUUsaUJBQWlCO2FBQ3pCLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUVwQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxwYXNzd29yZC1yZXNldFxcaW5pdFxccGFzc3dvcmQtcmVzZXQtaW5pdC5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XHJcbmltcG9ydCB7IEZvcm1CdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBvZiwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgQmlibGlvVGVzdE1vZHVsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3Rlc3QubW9kdWxlJztcclxuaW1wb3J0IHsgUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQgfSBmcm9tICdhcHAvYWNjb3VudC9wYXNzd29yZC1yZXNldC9pbml0L3Bhc3N3b3JkLXJlc2V0LWluaXQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUGFzc3dvcmRSZXNldEluaXRTZXJ2aWNlIH0gZnJvbSAnYXBwL2FjY291bnQvcGFzc3dvcmQtcmVzZXQvaW5pdC9wYXNzd29yZC1yZXNldC1pbml0LnNlcnZpY2UnO1xyXG5cclxuZGVzY3JpYmUoJ0NvbXBvbmVudCBUZXN0cycsICgpID0+IHtcclxuICBkZXNjcmliZSgnUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxQYXNzd29yZFJlc2V0SW5pdENvbXBvbmVudD47XHJcbiAgICBsZXQgY29tcDogUGFzc3dvcmRSZXNldEluaXRDb21wb25lbnQ7XHJcblxyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xyXG4gICAgICAgIGltcG9ydHM6IFtCaWJsaW9UZXN0TW9kdWxlXSxcclxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtQYXNzd29yZFJlc2V0SW5pdENvbXBvbmVudF0sXHJcbiAgICAgICAgcHJvdmlkZXJzOiBbRm9ybUJ1aWxkZXJdLFxyXG4gICAgICB9KVxyXG4gICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKFBhc3N3b3JkUmVzZXRJbml0Q29tcG9uZW50LCAnJylcclxuICAgICAgICAuY3JlYXRlQ29tcG9uZW50KFBhc3N3b3JkUmVzZXRJbml0Q29tcG9uZW50KTtcclxuICAgICAgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2V0cyBmb2N1cyBhZnRlciB0aGUgdmlldyBoYXMgYmVlbiBpbml0aWFsaXplZCcsICgpID0+IHtcclxuICAgICAgY29uc3Qgbm9kZSA9IHtcclxuICAgICAgICBmb2N1cygpOiB2b2lkIHt9LFxyXG4gICAgICB9O1xyXG4gICAgICBjb21wLmVtYWlsID0gbmV3IEVsZW1lbnRSZWYobm9kZSk7XHJcbiAgICAgIHNweU9uKG5vZGUsICdmb2N1cycpO1xyXG5cclxuICAgICAgY29tcC5uZ0FmdGVyVmlld0luaXQoKTtcclxuXHJcbiAgICAgIGV4cGVjdChub2RlLmZvY3VzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnbm90aWZpZXMgb2Ygc3VjY2VzcyB1cG9uIHN1Y2Nlc3NmdWwgcmVxdWVzdFJlc2V0JywgaW5qZWN0KFtQYXNzd29yZFJlc2V0SW5pdFNlcnZpY2VdLCAoc2VydmljZTogUGFzc3dvcmRSZXNldEluaXRTZXJ2aWNlKSA9PiB7XHJcbiAgICAgIHNweU9uKHNlcnZpY2UsICdzYXZlJykuYW5kLnJldHVyblZhbHVlKG9mKHt9KSk7XHJcbiAgICAgIGNvbXAucmVzZXRSZXF1ZXN0Rm9ybS5wYXRjaFZhbHVlKHtcclxuICAgICAgICBlbWFpbDogJ3VzZXJAZG9tYWluLmNvbScsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29tcC5yZXF1ZXN0UmVzZXQoKTtcclxuXHJcbiAgICAgIGV4cGVjdChzZXJ2aWNlLnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd1c2VyQGRvbWFpbi5jb20nKTtcclxuICAgICAgZXhwZWN0KGNvbXAuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICAgIH0pKTtcclxuXHJcbiAgICBpdCgnbm8gbm90aWZpY2F0aW9uIG9mIHN1Y2Nlc3MgdXBvbiBlcnJvciByZXNwb25zZScsIGluamVjdChbUGFzc3dvcmRSZXNldEluaXRTZXJ2aWNlXSwgKHNlcnZpY2U6IFBhc3N3b3JkUmVzZXRJbml0U2VydmljZSkgPT4ge1xyXG4gICAgICBzcHlPbihzZXJ2aWNlLCAnc2F2ZScpLmFuZC5yZXR1cm5WYWx1ZShcclxuICAgICAgICB0aHJvd0Vycm9yKHtcclxuICAgICAgICAgIHN0YXR1czogNTAzLFxyXG4gICAgICAgICAgZGF0YTogJ3NvbWV0aGluZyBlbHNlJyxcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgICBjb21wLnJlc2V0UmVxdWVzdEZvcm0ucGF0Y2hWYWx1ZSh7XHJcbiAgICAgICAgZW1haWw6ICd1c2VyQGRvbWFpbi5jb20nLFxyXG4gICAgICB9KTtcclxuICAgICAgY29tcC5yZXF1ZXN0UmVzZXQoKTtcclxuXHJcbiAgICAgIGV4cGVjdChzZXJ2aWNlLnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd1c2VyQGRvbWFpbi5jb20nKTtcclxuICAgICAgZXhwZWN0KGNvbXAuc3VjY2VzcykudG9CZShmYWxzZSk7XHJcbiAgICB9KSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=