{"version":3,"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\main\\webapp\\app\\account\\password\\password.component.ts"],"names":[],"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { Account } from 'app/core/user/account.model';\r\nimport { PasswordService } from './password.service';\r\n\r\n@Component({\r\n  selector: 'jhi-password',\r\n  templateUrl: './password.component.html',\r\n})\r\nexport class PasswordComponent implements OnInit {\r\n  doNotMatch = false;\r\n  error = false;\r\n  success = false;\r\n  account$?: Observable<Account | null>;\r\n  passwordForm = this.fb.group({\r\n    currentPassword: ['', [Validators.required]],\r\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\r\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\r\n  });\r\n\r\n  constructor(private passwordService: PasswordService, private accountService: AccountService, private fb: FormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    this.account$ = this.accountService.identity();\r\n  }\r\n\r\n  changePassword(): void {\r\n    this.error = false;\r\n    this.success = false;\r\n    this.doNotMatch = false;\r\n\r\n    const newPassword = this.passwordForm.get(['newPassword'])!.value;\r\n    if (newPassword !== this.passwordForm.get(['confirmPassword'])!.value) {\r\n      this.doNotMatch = true;\r\n    } else {\r\n      this.passwordService.save(newPassword, this.passwordForm.get(['currentPassword'])!.value).subscribe(\r\n        () => (this.success = true),\r\n        () => (this.error = true)\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}