33078e79923c9b52ea035ab048082eb2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../../test.module");
const password_reset_finish_component_1 = require("app/account/password-reset/finish/password-reset-finish.component");
const password_reset_finish_service_1 = require("app/account/password-reset/finish/password-reset-finish.service");
const mock_route_service_1 = require("../../../../helpers/mock-route.service");
describe('Component Tests', () => {
    describe('PasswordResetFinishComponent', () => {
        let fixture;
        let comp;
        beforeEach(() => {
            fixture = testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.BiblioTestModule],
                declarations: [password_reset_finish_component_1.PasswordResetFinishComponent],
                providers: [
                    forms_1.FormBuilder,
                    {
                        provide: router_1.ActivatedRoute,
                        useValue: new mock_route_service_1.MockActivatedRoute({ key: 'XYZPDQ' }),
                    },
                ],
            })
                .overrideTemplate(password_reset_finish_component_1.PasswordResetFinishComponent, '')
                .createComponent(password_reset_finish_component_1.PasswordResetFinishComponent);
        });
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(password_reset_finish_component_1.PasswordResetFinishComponent);
            comp = fixture.componentInstance;
            comp.ngOnInit();
        });
        it('should define its initial state', () => {
            expect(comp.initialized).toBe(true);
            expect(comp.key).toEqual('XYZPDQ');
        });
        it('sets focus after the view has been initialized', () => {
            const node = {
                focus() { },
            };
            comp.newPassword = new core_1.ElementRef(node);
            spyOn(node, 'focus');
            comp.ngAfterViewInit();
            expect(node.focus).toHaveBeenCalled();
        });
        it('should ensure the two passwords entered match', () => {
            comp.passwordForm.patchValue({
                newPassword: 'password',
                confirmPassword: 'non-matching',
            });
            comp.finishReset();
            expect(comp.doNotMatch).toBe(true);
        });
        it('should update success to true after resetting password', testing_1.inject([password_reset_finish_service_1.PasswordResetFinishService], testing_1.fakeAsync((service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.of({}));
            comp.passwordForm.patchValue({
                newPassword: 'password',
                confirmPassword: 'password',
            });
            comp.finishReset();
            testing_1.tick();
            expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');
            expect(comp.success).toBe(true);
        })));
        it('should notify of generic error', testing_1.inject([password_reset_finish_service_1.PasswordResetFinishService], testing_1.fakeAsync((service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.throwError('ERROR'));
            comp.passwordForm.patchValue({
                newPassword: 'password',
                confirmPassword: 'password',
            });
            comp.finishReset();
            testing_1.tick();
            expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');
            expect(comp.success).toBe(false);
            expect(comp.error).toBe(true);
        })));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxwYXNzd29yZC1yZXNldFxcZmluaXNoXFxwYXNzd29yZC1yZXNldC1maW5pc2guY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBMkM7QUFDM0MsbURBQTJGO0FBQzNGLDBDQUE2QztBQUM3Qyw0Q0FBaUQ7QUFDakQsK0JBQXNDO0FBRXRDLHlEQUEyRDtBQUMzRCx1SEFBaUg7QUFDakgsbUhBQTZHO0FBQzdHLCtFQUE0RTtBQUU1RSxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDNUMsSUFBSSxPQUF1RCxDQUFDO1FBQzVELElBQUksSUFBa0MsQ0FBQztRQUV2QyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQ3ZDLE9BQU8sRUFBRSxDQUFDLDhCQUFnQixDQUFDO2dCQUMzQixZQUFZLEVBQUUsQ0FBQyw4REFBNEIsQ0FBQztnQkFDNUMsU0FBUyxFQUFFO29CQUNULG1CQUFXO29CQUNYO3dCQUNFLE9BQU8sRUFBRSx1QkFBYzt3QkFDdkIsUUFBUSxFQUFFLElBQUksdUNBQWtCLENBQUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUM7cUJBQ3BEO2lCQUNGO2FBQ0YsQ0FBQztpQkFDQyxnQkFBZ0IsQ0FBQyw4REFBNEIsRUFBRSxFQUFFLENBQUM7aUJBQ2xELGVBQWUsQ0FBQyw4REFBNEIsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBRUgsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyw4REFBNEIsQ0FBQyxDQUFDO1lBQ2hFLElBQUksR0FBRyxPQUFPLENB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QyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUNILENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxiaWJsaW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxwYXNzd29yZC1yZXNldFxcZmluaXNoXFxwYXNzd29yZC1yZXNldC1maW5pc2guY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCBpbmplY3QsIHRpY2ssIGZha2VBc3luYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XHJcbmltcG9ydCB7IEZvcm1CdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBCaWJsaW9UZXN0TW9kdWxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdGVzdC5tb2R1bGUnO1xyXG5pbXBvcnQgeyBQYXNzd29yZFJlc2V0RmluaXNoQ29tcG9uZW50IH0gZnJvbSAnYXBwL2FjY291bnQvcGFzc3dvcmQtcmVzZXQvZmluaXNoL3Bhc3N3b3JkLXJlc2V0LWZpbmlzaC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQYXNzd29yZFJlc2V0RmluaXNoU2VydmljZSB9IGZyb20gJ2FwcC9hY2NvdW50L3Bhc3N3b3JkLXJlc2V0L2ZpbmlzaC9wYXNzd29yZC1yZXNldC1maW5pc2guc2VydmljZSc7XHJcbmltcG9ydCB7IE1vY2tBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvbW9jay1yb3V0ZS5zZXJ2aWNlJztcclxuXHJcbmRlc2NyaWJlKCdDb21wb25lbnQgVGVzdHMnLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ1Bhc3N3b3JkUmVzZXRGaW5pc2hDb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxQYXNzd29yZFJlc2V0RmluaXNoQ29tcG9uZW50PjtcclxuICAgIGxldCBjb21wOiBQYXNzd29yZFJlc2V0RmluaXNoQ29tcG9uZW50O1xyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcclxuICAgICAgICBpbXBvcnRzOiBbQmlibGlvVGVzdE1vZHVsZV0sXHJcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbUGFzc3dvcmRSZXNldEZpbmlzaENvbXBvbmVudF0sXHJcbiAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICBGb3JtQnVpbGRlcixcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgcHJvdmlkZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgICAgICAgICAgIHVzZVZhbHVlOiBuZXcgTW9ja0FjdGl2YXRlZFJvdXRlKHsga2V5OiAnWFlaUERRJyB9KSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgICAgfSlcclxuICAgICAgICAub3ZlcnJpZGVUZW1wbGF0ZShQYXNzd29yZFJlc2V0RmluaXNoQ29tcG9uZW50LCAnJylcclxuICAgICAgICAuY3JlYXRlQ29tcG9uZW50KFBhc3N3b3JkUmVzZXRGaW5pc2hDb21wb25lbnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChQYXNzd29yZFJlc2V0RmluaXNoQ29tcG9uZW50KTtcclxuICAgICAgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICAgIGNvbXAubmdPbkluaXQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgZGVmaW5lIGl0cyBpbml0aWFsIHN0YXRlJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoY29tcC5pbml0aWFsaXplZCkudG9CZSh0cnVlKTtcclxuICAgICAgZXhwZWN0KGNvbXAua2V5KS50b0VxdWFsKCdYWVpQRFEnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzZXRzIGZvY3VzIGFmdGVyIHRoZSB2aWV3IGhhcyBiZWVuIGluaXRpYWxpemVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBub2RlID0ge1xyXG4gICAgICAgIGZvY3VzKCk6IHZvaWQge30sXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbXAubmV3UGFzc3dvcmQgPSBuZXcgRWxlbWVudFJlZihub2RlKTtcclxuICAgICAgc3B5T24obm9kZSwgJ2ZvY3VzJyk7XHJcblxyXG4gICAgICBjb21wLm5nQWZ0ZXJWaWV3SW5pdCgpO1xyXG5cclxuICAgICAgZXhwZWN0KG5vZGUuZm9jdXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgZW5zdXJlIHRoZSB0d28gcGFzc3dvcmRzIGVudGVyZWQgbWF0Y2gnLCAoKSA9PiB7XHJcbiAgICAgIGNvbXAucGFzc3dvcmRGb3JtLnBhdGNoVmFsdWUoe1xyXG4gICAgICAgIG5ld1Bhc3N3b3JkOiAncGFzc3dvcmQnLFxyXG4gICAgICAgIGNvbmZpcm1QYXNzd29yZDogJ25vbi1tYXRjaGluZycsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29tcC5maW5pc2hSZXNldCgpO1xyXG5cclxuICAgICAgZXhwZWN0KGNvbXAuZG9Ob3RNYXRjaCkudG9CZSh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdXBkYXRlIHN1Y2Nlc3MgdG8gdHJ1ZSBhZnRlciByZXNldHRpbmcgcGFzc3dvcmQnLCBpbmplY3QoXHJcbiAgICAgIFtQYXNzd29yZFJlc2V0RmluaXNoU2VydmljZV0sXHJcbiAgICAgIGZha2VBc3luYygoc2VydmljZTogUGFzc3dvcmRSZXNldEZpbmlzaFNlcnZpY2UpID0+IHtcclxuICAgICAgICBzcHlPbihzZXJ2aWNlLCAnc2F2ZScpLmFuZC5yZXR1cm5WYWx1ZShvZih7fSkpO1xyXG4gICAgICAgIGNvbXAucGFzc3dvcmRGb3JtLnBhdGNoVmFsdWUoe1xyXG4gICAgICAgICAgbmV3UGFzc3dvcmQ6ICdwYXNzd29yZCcsXHJcbiAgICAgICAgICBjb25maXJtUGFzc3dvcmQ6ICdwYXNzd29yZCcsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbXAuZmluaXNoUmVzZXQoKTtcclxuICAgICAgICB0aWNrKCk7XHJcblxyXG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdYWVpQRFEnLCAncGFzc3dvcmQnKTtcclxuICAgICAgICBleHBlY3QoY29tcC5zdWNjZXNzKS50b0JlKHRydWUpO1xyXG4gICAgICB9KVxyXG4gICAgKSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBub3RpZnkgb2YgZ2VuZXJpYyBlcnJvcicsIGluamVjdChcclxuICAgICAgW1Bhc3N3b3JkUmVzZXRGaW5pc2hTZXJ2aWNlXSxcclxuICAgICAgZmFrZUFzeW5jKChzZXJ2aWNlOiBQYXNzd29yZFJlc2V0RmluaXNoU2VydmljZSkgPT4ge1xyXG4gICAgICAgIHNweU9uKHNlcnZpY2UsICdzYXZlJykuYW5kLnJldHVyblZhbHVlKHRocm93RXJyb3IoJ0VSUk9SJykpO1xyXG4gICAgICAgIGNvbXAucGFzc3dvcmRGb3JtLnBhdGNoVmFsdWUoe1xyXG4gICAgICAgICAgbmV3UGFzc3dvcmQ6ICdwYXNzd29yZCcsXHJcbiAgICAgICAgICBjb25maXJtUGFzc3dvcmQ6ICdwYXNzd29yZCcsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbXAuZmluaXNoUmVzZXQoKTtcclxuICAgICAgICB0aWNrKCk7XHJcblxyXG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdYWVpQRFEnLCAncGFzc3dvcmQnKTtcclxuICAgICAgICBleHBlY3QoY29tcC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcclxuICAgICAgICBleHBlY3QoY29tcC5lcnJvcikudG9CZSh0cnVlKTtcclxuICAgICAgfSlcclxuICAgICkpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9