{"file":"C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\account\\password-reset\\finish\\password-reset-finish.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\account\\password-reset\\finish\\password-reset-finish.component.spec.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\r\nimport { ComponentFixture, TestBed, inject, tick, fakeAsync } from '@angular/core/testing';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { of, throwError } from 'rxjs';\r\n\r\nimport { BiblioTestModule } from '../../../../test.module';\r\nimport { PasswordResetFinishComponent } from 'app/account/password-reset/finish/password-reset-finish.component';\r\nimport { PasswordResetFinishService } from 'app/account/password-reset/finish/password-reset-finish.service';\r\nimport { MockActivatedRoute } from '../../../../helpers/mock-route.service';\r\n\r\ndescribe('Component Tests', () => {\r\n  describe('PasswordResetFinishComponent', () => {\r\n    let fixture: ComponentFixture<PasswordResetFinishComponent>;\r\n    let comp: PasswordResetFinishComponent;\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.configureTestingModule({\r\n        imports: [BiblioTestModule],\r\n        declarations: [PasswordResetFinishComponent],\r\n        providers: [\r\n          FormBuilder,\r\n          {\r\n            provide: ActivatedRoute,\r\n            useValue: new MockActivatedRoute({ key: 'XYZPDQ' }),\r\n          },\r\n        ],\r\n      })\r\n        .overrideTemplate(PasswordResetFinishComponent, '')\r\n        .createComponent(PasswordResetFinishComponent);\r\n    });\r\n\r\n    beforeEach(() => {\r\n      fixture = TestBed.createComponent(PasswordResetFinishComponent);\r\n      comp = fixture.componentInstance;\r\n      comp.ngOnInit();\r\n    });\r\n\r\n    it('should define its initial state', () => {\r\n      expect(comp.initialized).toBe(true);\r\n      expect(comp.key).toEqual('XYZPDQ');\r\n    });\r\n\r\n    it('sets focus after the view has been initialized', () => {\r\n      const node = {\r\n        focus(): void {},\r\n      };\r\n      comp.newPassword = new ElementRef(node);\r\n      spyOn(node, 'focus');\r\n\r\n      comp.ngAfterViewInit();\r\n\r\n      expect(node.focus).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should ensure the two passwords entered match', () => {\r\n      comp.passwordForm.patchValue({\r\n        newPassword: 'password',\r\n        confirmPassword: 'non-matching',\r\n      });\r\n\r\n      comp.finishReset();\r\n\r\n      expect(comp.doNotMatch).toBe(true);\r\n    });\r\n\r\n    it('should update success to true after resetting password', inject(\r\n      [PasswordResetFinishService],\r\n      fakeAsync((service: PasswordResetFinishService) => {\r\n        spyOn(service, 'save').and.returnValue(of({}));\r\n        comp.passwordForm.patchValue({\r\n          newPassword: 'password',\r\n          confirmPassword: 'password',\r\n        });\r\n\r\n        comp.finishReset();\r\n        tick();\r\n\r\n        expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');\r\n        expect(comp.success).toBe(true);\r\n      })\r\n    ));\r\n\r\n    it('should notify of generic error', inject(\r\n      [PasswordResetFinishService],\r\n      fakeAsync((service: PasswordResetFinishService) => {\r\n        spyOn(service, 'save').and.returnValue(throwError('ERROR'));\r\n        comp.passwordForm.patchValue({\r\n          newPassword: 'password',\r\n          confirmPassword: 'password',\r\n        });\r\n\r\n        comp.finishReset();\r\n        tick();\r\n\r\n        expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');\r\n        expect(comp.success).toBe(false);\r\n        expect(comp.error).toBe(true);\r\n      })\r\n    ));\r\n  });\r\n});\r\n"],"version":3}