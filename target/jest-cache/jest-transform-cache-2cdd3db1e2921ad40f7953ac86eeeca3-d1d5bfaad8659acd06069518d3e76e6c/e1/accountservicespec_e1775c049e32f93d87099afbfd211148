a9e6852079f32151c2fe97d05fd4aa64
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const router_1 = require("@angular/router");
const testing_1 = require("@angular/common/http/testing");
const testing_2 = require("@angular/core/testing");
const ng_jhipster_1 = require("ng-jhipster");
const ngx_webstorage_1 = require("ngx-webstorage");
const app_constants_1 = require("app/app.constants");
const account_service_1 = require("app/core/auth/account.service");
const authority_constants_1 = require("app/shared/constants/authority.constants");
const state_storage_service_1 = require("app/core/auth/state-storage.service");
const mock_route_service_1 = require("../../../helpers/mock-route.service");
const mock_state_storage_service_1 = require("../../../helpers/mock-state-storage.service");
function accountWithAuthorities(authorities) {
    return {
        activated: true,
        authorities,
        email: '',
        firstName: '',
        langKey: '',
        lastName: '',
        login: '',
        imageUrl: '',
    };
}
describe('Service Tests', () => {
    describe('Account Service', () => {
        let service;
        let httpMock;
        let storageService;
        let router;
        beforeEach(() => {
            testing_2.TestBed.configureTestingModule({
                imports: [testing_1.HttpClientTestingModule, ngx_webstorage_1.NgxWebstorageModule.forRoot()],
                providers: [
                    ng_jhipster_1.JhiDateUtils,
                    {
                        provide: state_storage_service_1.StateStorageService,
                        useClass: mock_state_storage_service_1.MockStateStorageService,
                    },
                    {
                        provide: router_1.Router,
                        useClass: mock_route_service_1.MockRouter,
                    },
                ],
            });
            service = testing_2.TestBed.get(account_service_1.AccountService);
            httpMock = testing_2.TestBed.get(testing_1.HttpTestingController);
            storageService = testing_2.TestBed.get(state_storage_service_1.StateStorageService);
            router = testing_2.TestBed.get(router_1.Router);
        });
        afterEach(() => {
            httpMock.verify();
        });
        describe('authenticate', () => {
            it('authenticationState should emit null if input is null', () => {
                // GIVEN
                let userIdentity = accountWithAuthorities([]);
                service.getAuthenticationState().subscribe(account => (userIdentity = account));
                // WHEN
                service.authenticate(null);
                // THEN
                expect(userIdentity).toBeNull();
                expect(service.isAuthenticated()).toBe(false);
            });
            it('authenticationState should emit the same account as was in input parameter', () => {
                // GIVEN
                const expectedResult = accountWithAuthorities([]);
                let userIdentity = null;
                service.getAuthenticationState().subscribe(account => (userIdentity = account));
                // WHEN
                service.authenticate(expectedResult);
                // THEN
                expect(userIdentity).toEqual(expectedResult);
                expect(service.isAuthenticated()).toBe(true);
            });
        });
        describe('identity', () => {
            it('should call /account if user is undefined', () => {
                service.identity().subscribe();
                const req = httpMock.expectOne({ method: 'GET' });
                const resourceUrl = app_constants_1.SERVER_API_URL + 'api/account';
                expect(req.request.url).toEqual(`${resourceUrl}`);
            });
            it('should call /account only once if not logged out after first authentication and should call /account again if user has logged out', () => {
                // Given the user is authenticated
                service.identity().subscribe();
                httpMock.expectOne({ method: 'GET' }).flush({});
                // When I call
                service.identity().subscribe();
                // Then there is no second request
                httpMock.expectNone({ method: 'GET' });
                // When I log out
                service.authenticate(null);
                // and then call
                service.identity().subscribe();
                // Then there is a new request
                httpMock.expectOne({ method: 'GET' });
            });
            describe('navigateToStoredUrl', () => {
                it('should navigate to the previous stored url post successful authentication', () => {
                    // GIVEN
                    storageService.setResponse('admin/users?page=0');
                    // WHEN
                    service.identity().subscribe();
                    httpMock.expectOne({ method: 'GET' }).flush({});
                    // THEN
                    expect(storageService.getUrlSpy).toHaveBeenCalledTimes(1);
                    expect(storageService.clearUrlSpy).toHaveBeenCalledTimes(1);
                    expect(router.navigateByUrlSpy).toHaveBeenCalledWith('admin/users?page=0');
                });
                it('should not navigate to the previous stored url when authentication fails', () => {
                    // WHEN
                    service.identity().subscribe();
                    httpMock.expectOne({ method: 'GET' }).error(new ErrorEvent(''));
                    // THEN
                    expect(storageService.getUrlSpy).not.toHaveBeenCalled();
                    expect(storageService.clearUrlSpy).not.toHaveBeenCalled();
                    expect(router.navigateByUrlSpy).not.toHaveBeenCalled();
                });
                it('should not navigate to the previous stored url when no such url exists post successful authentication', () => {
                    // GIVEN
                    storageService.setResponse(null);
                    // WHEN
                    service.identity().subscribe();
                    httpMock.expectOne({ method: 'GET' }).flush({});
                    // THEN
                    expect(storageService.getUrlSpy).toHaveBeenCalledTimes(1);
                    expect(storageService.clearUrlSpy).not.toHaveBeenCalled();
                    expect(router.navigateByUrlSpy).not.toHaveBeenCalled();
                });
            });
        });
        describe('hasAnyAuthority', () => {
            describe('hasAnyAuthority string parameter', () => {
                it('should return false if user is not logged', () => {
                    const hasAuthority = service.hasAnyAuthority(authority_constants_1.Authority.USER);
                    expect(hasAuthority).toBe(false);
                });
                it('should return false if user is logged and has not authority', () => {
                    service.authenticate(accountWithAuthorities([authority_constants_1.Authority.USER]));
                    const hasAuthority = service.hasAnyAuthority(authority_constants_1.Authority.ADMIN);
                    expect(hasAuthority).toBe(false);
                });
                it('should return true if user is logged and has authority', () => {
                    service.authenticate(accountWithAuthorities([authority_constants_1.Authority.USER]));
                    const hasAuthority = service.hasAnyAuthority(authority_constants_1.Authority.USER);
                    expect(hasAuthority).toBe(true);
                });
            });
            describe('hasAnyAuthority array parameter', () => {
                it('should return false if user is not logged', () => {
                    const hasAuthority = service.hasAnyAuthority([authority_constants_1.Authority.USER]);
                    expect(hasAuthority).toBeFalsy();
                });
                it('should return false if user is logged and has not authority', () => {
                    service.authenticate(accountWithAuthorities([authority_constants_1.Authority.USER]));
                    const hasAuthority = service.hasAnyAuthority([authority_constants_1.Authority.ADMIN]);
                    expect(hasAuthority).toBe(false);
                });
                it('should return true if user is logged and has authority', () => {
                    service.authenticate(accountWithAuthorities([authority_constants_1.Authority.USER]));
                    const hasAuthority = service.hasAnyAuthority([authority_constants_1.Authority.USER, authority_constants_1.Authority.ADMIN]);
                    expect(hasAuthority).toBe(true);
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,