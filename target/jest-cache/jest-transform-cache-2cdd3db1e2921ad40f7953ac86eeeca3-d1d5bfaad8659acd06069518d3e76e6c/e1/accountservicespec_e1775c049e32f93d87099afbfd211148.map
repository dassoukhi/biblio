{"file":"C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\core\\user\\account.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\test\\javascript\\spec\\app\\core\\user\\account.service.spec.ts"],"sourcesContent":["import { Router } from '@angular/router';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { JhiDateUtils } from 'ng-jhipster';\r\nimport { NgxWebstorageModule } from 'ngx-webstorage';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { Account } from 'app/core/user/account.model';\r\nimport { Authority } from 'app/shared/constants/authority.constants';\r\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\r\nimport { MockRouter } from '../../../helpers/mock-route.service';\r\nimport { MockStateStorageService } from '../../../helpers/mock-state-storage.service';\r\n\r\nfunction accountWithAuthorities(authorities: string[]): Account {\r\n  return {\r\n    activated: true,\r\n    authorities,\r\n    email: '',\r\n    firstName: '',\r\n    langKey: '',\r\n    lastName: '',\r\n    login: '',\r\n    imageUrl: '',\r\n  };\r\n}\r\n\r\ndescribe('Service Tests', () => {\r\n  describe('Account Service', () => {\r\n    let service: AccountService;\r\n    let httpMock: HttpTestingController;\r\n    let storageService: MockStateStorageService;\r\n    let router: MockRouter;\r\n\r\n    beforeEach(() => {\r\n      TestBed.configureTestingModule({\r\n        imports: [HttpClientTestingModule, NgxWebstorageModule.forRoot()],\r\n        providers: [\r\n          JhiDateUtils,\r\n          {\r\n            provide: StateStorageService,\r\n            useClass: MockStateStorageService,\r\n          },\r\n          {\r\n            provide: Router,\r\n            useClass: MockRouter,\r\n          },\r\n        ],\r\n      });\r\n\r\n      service = TestBed.get(AccountService);\r\n      httpMock = TestBed.get(HttpTestingController);\r\n      storageService = TestBed.get(StateStorageService);\r\n      router = TestBed.get(Router);\r\n    });\r\n\r\n    afterEach(() => {\r\n      httpMock.verify();\r\n    });\r\n\r\n    describe('authenticate', () => {\r\n      it('authenticationState should emit null if input is null', () => {\r\n        // GIVEN\r\n        let userIdentity: Account | null = accountWithAuthorities([]);\r\n        service.getAuthenticationState().subscribe(account => (userIdentity = account));\r\n\r\n        // WHEN\r\n        service.authenticate(null);\r\n\r\n        // THEN\r\n        expect(userIdentity).toBeNull();\r\n        expect(service.isAuthenticated()).toBe(false);\r\n      });\r\n\r\n      it('authenticationState should emit the same account as was in input parameter', () => {\r\n        // GIVEN\r\n        const expectedResult = accountWithAuthorities([]);\r\n        let userIdentity: Account | null = null;\r\n        service.getAuthenticationState().subscribe(account => (userIdentity = account));\r\n\r\n        // WHEN\r\n        service.authenticate(expectedResult);\r\n\r\n        // THEN\r\n        expect(userIdentity).toEqual(expectedResult);\r\n        expect(service.isAuthenticated()).toBe(true);\r\n      });\r\n    });\r\n\r\n    describe('identity', () => {\r\n      it('should call /account if user is undefined', () => {\r\n        service.identity().subscribe();\r\n        const req = httpMock.expectOne({ method: 'GET' });\r\n        const resourceUrl = SERVER_API_URL + 'api/account';\r\n\r\n        expect(req.request.url).toEqual(`${resourceUrl}`);\r\n      });\r\n\r\n      it('should call /account only once if not logged out after first authentication and should call /account again if user has logged out', () => {\r\n        // Given the user is authenticated\r\n        service.identity().subscribe();\r\n        httpMock.expectOne({ method: 'GET' }).flush({});\r\n\r\n        // When I call\r\n        service.identity().subscribe();\r\n\r\n        // Then there is no second request\r\n        httpMock.expectNone({ method: 'GET' });\r\n\r\n        // When I log out\r\n        service.authenticate(null);\r\n        // and then call\r\n        service.identity().subscribe();\r\n\r\n        // Then there is a new request\r\n        httpMock.expectOne({ method: 'GET' });\r\n      });\r\n\r\n      describe('navigateToStoredUrl', () => {\r\n        it('should navigate to the previous stored url post successful authentication', () => {\r\n          // GIVEN\r\n          storageService.setResponse('admin/users?page=0');\r\n\r\n          // WHEN\r\n          service.identity().subscribe();\r\n          httpMock.expectOne({ method: 'GET' }).flush({});\r\n\r\n          // THEN\r\n          expect(storageService.getUrlSpy).toHaveBeenCalledTimes(1);\r\n          expect(storageService.clearUrlSpy).toHaveBeenCalledTimes(1);\r\n          expect(router.navigateByUrlSpy).toHaveBeenCalledWith('admin/users?page=0');\r\n        });\r\n\r\n        it('should not navigate to the previous stored url when authentication fails', () => {\r\n          // WHEN\r\n          service.identity().subscribe();\r\n          httpMock.expectOne({ method: 'GET' }).error(new ErrorEvent(''));\r\n\r\n          // THEN\r\n          expect(storageService.getUrlSpy).not.toHaveBeenCalled();\r\n          expect(storageService.clearUrlSpy).not.toHaveBeenCalled();\r\n          expect(router.navigateByUrlSpy).not.toHaveBeenCalled();\r\n        });\r\n\r\n        it('should not navigate to the previous stored url when no such url exists post successful authentication', () => {\r\n          // GIVEN\r\n          storageService.setResponse(null);\r\n\r\n          // WHEN\r\n          service.identity().subscribe();\r\n          httpMock.expectOne({ method: 'GET' }).flush({});\r\n\r\n          // THEN\r\n          expect(storageService.getUrlSpy).toHaveBeenCalledTimes(1);\r\n          expect(storageService.clearUrlSpy).not.toHaveBeenCalled();\r\n          expect(router.navigateByUrlSpy).not.toHaveBeenCalled();\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('hasAnyAuthority', () => {\r\n      describe('hasAnyAuthority string parameter', () => {\r\n        it('should return false if user is not logged', () => {\r\n          const hasAuthority = service.hasAnyAuthority(Authority.USER);\r\n          expect(hasAuthority).toBe(false);\r\n        });\r\n\r\n        it('should return false if user is logged and has not authority', () => {\r\n          service.authenticate(accountWithAuthorities([Authority.USER]));\r\n\r\n          const hasAuthority = service.hasAnyAuthority(Authority.ADMIN);\r\n\r\n          expect(hasAuthority).toBe(false);\r\n        });\r\n\r\n        it('should return true if user is logged and has authority', () => {\r\n          service.authenticate(accountWithAuthorities([Authority.USER]));\r\n\r\n          const hasAuthority = service.hasAnyAuthority(Authority.USER);\r\n\r\n          expect(hasAuthority).toBe(true);\r\n        });\r\n      });\r\n\r\n      describe('hasAnyAuthority array parameter', () => {\r\n        it('should return false if user is not logged', () => {\r\n          const hasAuthority = service.hasAnyAuthority([Authority.USER]);\r\n          expect(hasAuthority).toBeFalsy();\r\n        });\r\n\r\n        it('should return false if user is logged and has not authority', () => {\r\n          service.authenticate(accountWithAuthorities([Authority.USER]));\r\n\r\n          const hasAuthority = service.hasAnyAuthority([Authority.ADMIN]);\r\n\r\n          expect(hasAuthority).toBe(false);\r\n        });\r\n\r\n        it('should return true if user is logged and has authority', () => {\r\n          service.authenticate(accountWithAuthorities([Authority.USER]));\r\n\r\n          const hasAuthority = service.hasAnyAuthority([Authority.USER, Authority.ADMIN]);\r\n\r\n          expect(hasAuthority).toBe(true);\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"version":3}