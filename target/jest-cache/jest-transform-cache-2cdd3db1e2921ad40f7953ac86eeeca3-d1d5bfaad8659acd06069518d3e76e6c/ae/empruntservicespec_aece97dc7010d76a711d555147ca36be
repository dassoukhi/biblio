4e95561ac1ce62ee22d3a54c03d40861
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const moment = require("moment");
const input_constants_1 = require("app/shared/constants/input.constants");
const emprunt_service_1 = require("app/entities/emprunt/emprunt.service");
const emprunt_model_1 = require("app/shared/model/emprunt.model");
describe('Service Tests', () => {
    describe('Emprunt Service', () => {
        let injector;
        let service;
        let httpMock;
        let elemDefault;
        let expectedResult;
        let currentDate;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            injector = testing_1.getTestBed();
            service = injector.get(emprunt_service_1.EmpruntService);
            httpMock = injector.get(testing_2.HttpTestingController);
            currentDate = moment();
            elemDefault = new emprunt_model_1.Emprunt(0, currentDate);
        });
        describe('Service methods', () => {
            it('should find an element', () => {
                const returnedFromService = Object.assign({
                    dateEmprunt: currentDate.format(input_constants_1.DATE_FORMAT),
                }, elemDefault);
                service.find(123).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(elemDefault);
            });
            it('should create a Emprunt', () => {
                const returnedFromService = Object.assign({
                    id: 0,
                    dateEmprunt: currentDate.format(input_constants_1.DATE_FORMAT),
                }, elemDefault);
                const expected = Object.assign({
                    dateEmprunt: currentDate,
                }, returnedFromService);
                service.create(new emprunt_model_1.Emprunt()).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should update a Emprunt', () => {
                const returnedFromService = Object.assign({
                    dateEmprunt: currentDate.format(input_constants_1.DATE_FORMAT),
                }, elemDefault);
                const expected = Object.assign({
                    dateEmprunt: currentDate,
                }, returnedFromService);
                service.update(expected).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should return a list of Emprunt', () => {
                const returnedFromService = Object.assign({
                    dateEmprunt: currentDate.format(input_constants_1.DATE_FORMAT),
                }, elemDefault);
                const expected = Object.assign({
                    dateEmprunt: currentDate,
                }, returnedFromService);
                service.query().subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });
            it('should delete a Emprunt', () => {
                service.delete(123).subscribe(resp => (expectedResult = resp.ok));
                const req = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
        });
        afterEach(() => {
            httpMock.verify();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,