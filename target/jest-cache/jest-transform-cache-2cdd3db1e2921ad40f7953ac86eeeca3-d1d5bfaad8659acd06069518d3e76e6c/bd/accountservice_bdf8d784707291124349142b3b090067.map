{"version":3,"sources":["C:\\Users\\Dass\\Desktop\\Master1_YNOV\\DevLogiciel\\biblio\\src\\main\\webapp\\app\\core\\auth\\account.service.ts"],"names":[],"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, ReplaySubject, of } from 'rxjs';\r\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\r\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { Account } from 'app/core/user/account.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AccountService {\r\n  private userIdentity: Account | null = null;\r\n  private authenticationState = new ReplaySubject<Account | null>(1);\r\n  private accountCache$?: Observable<Account | null>;\r\n\r\n  constructor(private http: HttpClient, private stateStorageService: StateStorageService, private router: Router) {}\r\n\r\n  save(account: Account): Observable<{}> {\r\n    return this.http.post(SERVER_API_URL + 'api/account', account);\r\n  }\r\n\r\n  authenticate(identity: Account | null): void {\r\n    this.userIdentity = identity;\r\n    this.authenticationState.next(this.userIdentity);\r\n  }\r\n\r\n  hasAnyAuthority(authorities: string[] | string): boolean {\r\n    if (!this.userIdentity || !this.userIdentity.authorities) {\r\n      return false;\r\n    }\r\n    if (!Array.isArray(authorities)) {\r\n      authorities = [authorities];\r\n    }\r\n    return this.userIdentity.authorities.some((authority: string) => authorities.includes(authority));\r\n  }\r\n\r\n  identity(force?: boolean): Observable<Account | null> {\r\n    if (!this.accountCache$ || force || !this.isAuthenticated()) {\r\n      this.accountCache$ = this.fetch().pipe(\r\n        catchError(() => {\r\n          return of(null);\r\n        }),\r\n        tap((account: Account | null) => {\r\n          this.authenticate(account);\r\n\r\n          if (account) {\r\n            this.navigateToStoredUrl();\r\n          }\r\n        }),\r\n        shareReplay()\r\n      );\r\n    }\r\n    return this.accountCache$;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.userIdentity !== null;\r\n  }\r\n\r\n  getAuthenticationState(): Observable<Account | null> {\r\n    return this.authenticationState.asObservable();\r\n  }\r\n\r\n  getImageUrl(): string {\r\n    return this.userIdentity ? this.userIdentity.imageUrl : '';\r\n  }\r\n\r\n  private fetch(): Observable<Account> {\r\n    return this.http.get<Account>(SERVER_API_URL + 'api/account');\r\n  }\r\n\r\n  private navigateToStoredUrl(): void {\r\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\r\n    // if login is successful, go to stored previousState and clear previousState\r\n    const previousUrl = this.stateStorageService.getUrl();\r\n    if (previousUrl) {\r\n      this.stateStorageService.clearUrl();\r\n      this.router.navigateByUrl(previousUrl);\r\n    }\r\n  }\r\n}\r\n"]}